{"sheets":[{"id":{"id":"ba0e1092-a79c-4f20-8759-c14655f88a38"},"name":"Sheet 1","color":null,"order":"a0","offsets":[[[0,275.9100338070991]],[]],"columns":[[0,{"values":{"7":{"Text":"1. Cells can contain code"},"1":{"Text":"The data science spreadsheet"},"17":{"Text":"More examples in File > Open sample"},"12":{"Text":"5. Double click and correct this error"},"14":{"Text":"    contain code and purple for formulas."},"0":{"Text":"Quadratic"},"9":{"Text":"    to create a new Formula or Python cell"},"10":{"Text":"3. Right click to access formatting menu"},"5":{"Text":"Quick start"},"8":{"Text":"2. Move to an empty cell and press ="},"11":{"Text":"4. Reference other cell values in Python"},"13":{"Text":"6. Blue cell outlines show you what cells"},"2":{"Text":"Read more docs.quadratichq.com"}},"align":{},"wrap":{},"numeric_format":{},"numeric_decimals":{},"numeric_commas":{},"bold":{"17":{"value":true,"len":1},"0":{"value":true,"len":1},"5":{"value":true,"len":1}},"italic":{"1":{"value":true,"len":2}},"text_color":{},"fill_color":{},"render_size":{}}],[1,{"values":{"10":{"Text":"Bold Me"},"11":{"Code":{"language":"Python","code":"# You can reference other cells and ranges in Python\n# using the built in function `cell` to get a value.\n# cell(x, y)\nprint(\"The value of cell 4, 7 is: \", cell(4, 7))\n\n# With cells you can do math\nprint(\"Addition cell 4, 7 and 4, 8: \", \n    cell(4, 7) + cell(4, 8))\n\n# And equality comparisons\n# Tip: you can use `c` for short referencing a cell\nprint(\"Equal: \", c(4, 7) == c(4, 8))\n\n\"Click Here\""}},"7":{"Code":{"language":"Python","code":"print(\"Hello world!\")\n# The last python statement is returned \n# as the cell value.\n\"Double click to see the code in this cell\"\n"}},"12":{"Code":{"language":"Python","code":"# Cells show when they are in the error state.\n# Fix this error by changing 0 to another number.\n1 / 0"}}},"align":{},"wrap":{},"numeric_format":{},"numeric_decimals":{},"numeric_commas":{},"bold":{"10":{"value":false,"len":1}},"italic":{},"text_color":{},"fill_color":{},"render_size":{}}],[3,{"values":{"10":{"Text":"SUM Formula"},"11":{"Text":"SUM Python"},"9":{"Text":"Ex Data"}},"align":{},"wrap":{},"numeric_format":{},"numeric_decimals":{},"numeric_commas":{},"bold":{"9":{"value":false,"len":1}},"italic":{"10":{"value":true,"len":2}},"text_color":{},"fill_color":{},"render_size":{}}],[4,{"values":{"5":{"Text":"Example data"},"7":{"Number":"343"},"8":{"Number":"120"},"10":{"Code":{"language":"Formula","code":"SUM(E7:E8)"}},"11":{"Code":{"language":"Python","code":"cell(4, 7) + cell(4, 8)"}}},"align":{},"wrap":{},"numeric_format":{},"numeric_decimals":{},"numeric_commas":{},"bold":{"5":{"value":true,"len":1}},"italic":{},"text_color":{},"fill_color":{"7":{"value":"rgb(218, 240, 255)","len":2}},"render_size":{}}],[6,{"values":{"5":{"Text":"Python examples"},"13":{"Text":"Generate a fake person using the Python package Faker"},"9":{"Code":{"language":"Python","code":"from pprint import pprint\nimport pandas as pd\nimport requests\n\nsymbol = c(6, 8)\n\nresponse = requests.get('https://api.polygon.io/vX/reference/financials?ticker={}&apiKey=_xBCl_0zcb9H1W25jJEK5pQaQTVLtemL'.format(symbol), {\n    \"method\": \"GET\",\n    \"headers\": {\"Content-Type\": \"application/json\"}\n})\nstock_financials_json = response.json()\nincome_statement = stock_financials_json[\"results\"][1][\"financials\"][\"income_statement\"]\nrevenue = income_statement[\"revenues\"][\"value\"]\n\n\nresponse_2 = requests.get('https://api.polygon.io/v3/reference/tickers/{}?apiKey=_xBCl_0zcb9H1W25jJEK5pQaQTVLtemL'.format(symbol), {\n    \"method\": \"GET\",\n    \"headers\": {\"Content-Type\": \"application/json\"}\n})\nmarket_data_json = response_2.json()['results']\nmarket_cap = market_data_json[\"market_cap\"]\nname = market_data_json[\"name\"]\n\npd.DataFrame([[\n    name[:20],\n    \"${:,}\".format(int(revenue)),\n    \"${:.2e}\".format(market_cap),\n    \"{:,.2f}\".format(market_cap / revenue),\n]], columns=[\"Full Name\", \"Revenue\", \"Market Cap\", \"Multiple\"])\n"}},"12":{"Text":"Use Python packages from PIP"},"7":{"Text":"Make an API request"},"8":{"Text":"AAPL"},"14":{"Code":{"language":"Python","code":"# Run this cell again to generate a new fake person\n\nimport micropip\n\nawait micropip.install(\"faker\")\n\nfrom faker import Faker\nfake = Faker()\n\n[\n    [\n        \"Name\"[:13],\n        \"Birthday\",\n        \"SSN\",\n        \"Phone\",\n        \"Address\"\n    ],\n    [\n        fake.name(),\n        str(fake.date_of_birth()),\n        fake.ssn(),\n        fake.phone_number()[:13],\n        fake.address()\n    ]\n]\n"}}},"align":{},"wrap":{},"numeric_format":{},"numeric_decimals":{},"numeric_commas":{},"bold":{"12":{"value":true,"len":1},"7":{"value":true,"len":1},"5":{"value":true,"len":1}},"italic":{},"text_color":{},"fill_color":{"8":{"value":"rgb(218, 240, 255)","len":1}},"render_size":{"17":{"value":{"w":"534","h":"446"},"len":1}}}],[7,{"values":{"8":{"Text":"< - Try changing ticker"}},"align":{},"wrap":{},"numeric_format":{},"numeric_decimals":{},"numeric_commas":{},"bold":{},"italic":{},"text_color":{},"fill_color":{},"render_size":{}}],[8,{"values":{},"align":{},"wrap":{},"numeric_format":{"10":{"value":{"type":"Currency","symbol":"$"},"len":1}},"numeric_decimals":{"10":{"value":2,"len":1}},"numeric_commas":{},"bold":{},"italic":{},"text_color":{},"fill_color":{},"render_size":{}}],[9,{"values":{},"align":{},"wrap":{},"numeric_format":{},"numeric_decimals":{},"numeric_commas":{},"bold":{},"italic":{},"text_color":{},"fill_color":{},"render_size":{}}],[10,{"values":{},"align":{},"wrap":{},"numeric_format":{},"numeric_decimals":{},"numeric_commas":{},"bold":{},"italic":{},"text_color":{},"fill_color":{},"render_size":{}}]],"borders":{"7":[]},"code_runs":[[{"x":6,"y":9},{"formatted_code_string":"from pprint import pprint\nimport pandas as pd\nimport requests\n\nsymbol = c(6, 8)\n\nresponse = requests.get('https://api.polygon.io/vX/reference/financials?ticker={}&apiKey=_xBCl_0zcb9H1W25jJEK5pQaQTVLtemL'.format(symbol), {\n    \"method\": \"GET\",\n    \"headers\": {\"Content-Type\": \"application/json\"}\n})\nstock_financials_json = response.json()\nincome_statement = stock_financials_json[\"results\"][1][\"financials\"][\"income_statement\"]\nrevenue = income_statement[\"revenues\"][\"value\"]\n\n\nresponse_2 = requests.get('https://api.polygon.io/v3/reference/tickers/{}?apiKey=_xBCl_0zcb9H1W25jJEK5pQaQTVLtemL'.format(symbol), {\n    \"method\": \"GET\",\n    \"headers\": {\"Content-Type\": \"application/json\"}\n})\nmarket_data_json = response_2.json()['results']\nmarket_cap = market_data_json[\"market_cap\"]\nname = market_data_json[\"name\"]\n\npd.DataFrame([[\n    name[:20],\n    \"${:,}\".format(int(revenue)),\n    \"${:.2e}\".format(market_cap),\n    \"{:,.2f}\".format(market_cap / revenue),\n]], columns=[\"Full Name\", \"Revenue\", \"Market Cap\", \"Multiple\"])\n","std_out":"","std_err":null,"cells_accessed":[{"min":{"x":6,"y":8},"max":{"x":6,"y":8},"sheet_id":{"id":"ba0e1092-a79c-4f20-8759-c14655f88a38"}}],"result":{"size":{"w":4,"h":2},"values":[{"type":"text","value":"Full Name"},{"type":"text","value":"Revenue"},{"type":"text","value":"Market Cap"},{"type":"text","value":"Multiple"},{"type":"text","value":"Apple Inc."},{"type":"text","value":"$89,498,000,000"},{"type":"number","value":"2950000000000"},{"type":"number","value":"32.91"}]},"return_type":null,"line_number":null,"output_type":null,"spill_error":false,"last_modified":0}],[{"x":1,"y":12},{"formatted_code_string":"# Cells show when they are in the error state.\n# Fix this error by changing 0 to another number.\n1 / 0","std_out":"","std_err":"ZeroDivisionError on line 3: division by zero","cells_accessed":[],"result":{"span":{"start":3,"end":3},"msg":{"InternalError":"(unknown error)"}},"return_type":null,"line_number":null,"output_type":null,"spill_error":false,"last_modified":0}],[{"x":6,"y":14},{"formatted_code_string":"# Run this cell again to generate a new fake person\n\nimport micropip\n\nawait micropip.install(\"faker\")\n\nfrom faker import Faker\nfake = Faker()\n\n[\n    [\n        \"Name\"[:13],\n        \"Birthday\",\n        \"SSN\",\n        \"Phone\",\n        \"Address\"\n    ],\n    [\n        fake.name(),\n        str(fake.date_of_birth()),\n        fake.ssn(),\n        fake.phone_number()[:13],\n        fake.address()\n    ]\n]\n","std_out":"","std_err":null,"cells_accessed":[],"result":{"size":{"w":5,"h":2},"values":[{"type":"text","value":"Name"},{"type":"text","value":"Birthday"},{"type":"text","value":"SSN"},{"type":"text","value":"Phone"},{"type":"text","value":"Address"},{"type":"text","value":"Samuel King"},{"type":"text","value":"1969-01-14"},{"type":"text","value":"525-35-3815"},{"type":"text","value":"950.549.2928x"},{"type":"text","value":"975 Cynthia Turnpike\nNew John, GA 73140"}]},"return_type":null,"line_number":null,"output_type":null,"spill_error":false,"last_modified":1679026814}],[{"x":4,"y":10},{"formatted_code_string":"SUM(E7:E8)","std_out":null,"std_err":null,"cells_accessed":[{"min":{"x":4,"y":8},"max":{"x":4,"y":8},"sheet_id":{"id":"ba0e1092-a79c-4f20-8759-c14655f88a38"}},{"min":{"x":4,"y":7},"max":{"x":4,"y":7},"sheet_id":{"id":"ba0e1092-a79c-4f20-8759-c14655f88a38"}}],"result":{"size":{"w":1,"h":1},"values":[{"type":"number","value":"463"}]},"return_type":null,"line_number":null,"output_type":null,"spill_error":false,"last_modified":1678814489}],[{"x":4,"y":11},{"formatted_code_string":"cell(4, 7) + cell(4, 8)\n","std_out":"","std_err":null,"cells_accessed":[{"min":{"x":4,"y":8},"max":{"x":4,"y":8},"sheet_id":{"id":"ba0e1092-a79c-4f20-8759-c14655f88a38"}},{"min":{"x":4,"y":7},"max":{"x":4,"y":7},"sheet_id":{"id":"ba0e1092-a79c-4f20-8759-c14655f88a38"}}],"result":{"type":"text","value":"463"},"return_type":null,"line_number":null,"output_type":null,"spill_error":false,"last_modified":1677022762}],[{"x":1,"y":11},{"formatted_code_string":"# You can reference other cells and ranges in Python\n# using the built in function `cell` to get a value.\n# cell(x, y)\nprint(\"The value of cell 4, 7 is: \", cell(4, 7))\n\n# With cells you can do math\nprint(\"Addition cell 4, 7 and 4, 8: \",\n      cell(4, 7) + cell(4, 8))\n\n# And equality comparisons\n# Tip: you can use `c` for short referencing a cell\nprint(\"Equal: \", c(4, 7) == c(4, 8))\n\n\"Click Here\"\n","std_out":"The value of cell 4, 7 is:  343\nAddition cell 4, 7 and 4, 8:  463\nEqual:  False\n","std_err":null,"cells_accessed":[{"min":{"x":4,"y":7},"max":{"x":4,"y":7},"sheet_id":{"id":"ba0e1092-a79c-4f20-8759-c14655f88a38"}},{"min":{"x":4,"y":8},"max":{"x":4,"y":8},"sheet_id":{"id":"ba0e1092-a79c-4f20-8759-c14655f88a38"}}],"result":{"type":"text","value":"Click Here"},"return_type":null,"line_number":null,"output_type":null,"spill_error":false,"last_modified":1679027087}],[{"x":1,"y":7},{"formatted_code_string":"print(\"Hello world!\")\n# The last python statement is returned\n# as the cell value.\n\"Double click to see the code in this cell\"\n","std_out":"Hello world!\n","std_err":null,"cells_accessed":[],"result":{"size":{"w":1,"h":1},"values":[{"type":"text","value":"Double click to see the code in this cell"}]},"return_type":null,"line_number":null,"output_type":null,"spill_error":false,"last_modified":1676506111}]]}],"version":"1.5"}