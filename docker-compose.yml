services:
  # base services - redis, postgres

  redis:
    image: redis/redis-stack:latest
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
      - "8001:8001"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: "5s"
    volumes:
      - ./docker/redis/data:/data:rw
    profiles:
      - redis
      - base
      - all

  postgres:
    image: postgres:17.4
    container_name: postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      PGUSER: postgres
      POSTGRES_PASSWORD: postgres
      ADDITIONAL_DATABASES: kratos
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./docker/postgres/data:/var/lib/postgresql/data:rw
      - ./docker/postgres/scripts:/docker-entrypoint-initdb.d
    profiles:
      - postgres
      - base
      - all

  # files service - local aws alternative, use this or file-storage

  localstack:
    container_name: "${LOCALSTACK_DOCKER_NAME:-localstack}"
    image: localstack/localstack:latest
    ports:
      - "127.0.0.1:4566:4566" # LocalStack Gateway
      # - "127.0.0.1:4567:4566"
      - "127.0.0.1:4510-4559:4510-4559"
    environment:
      # LocalStack configuration: https://docs.localstack.cloud/references/configuration/
      - LOCALSTACK_AUTH_TOKEN=${LOCALSTACK_AUTH_TOKEN:-}
      - DEBUG=${DEBUG:-0}
      - SERVICES=s3:4566
      - HOSTNAME=localstack
      - HOSTNAME_EXTERNAL=localstack
      - DEFAULT_REGION=us-east-2
      - DISABLE_CUSTOM_CORS_S3=true
      - DISABLE_CORS_CHECKS=true
      - EXTRA_CORS_ALLOWED_ORIGINS=*
    volumes:
      - "./docker/localstack/scripts/init-aws.sh:/etc/localstack/init/ready.d/init-aws.sh" # ready hook
      - "./docker/localstack/data:/var/lib/localstack:rw"
      - "/var/run/docker.sock:/var/run/docker.sock:rw"
    profiles:
      - base
    networks:
      - host

  # quadratic services - client, api, multiplayer, files, connection

  quadratic-client:
    extends:
      file: docker-compose.${ECR_OR_BUILD:-build}.yml
      service: quadratic-client
    container_name: client
    environment:
      VITE_DEBUG: 1
      VITE_QUADRATIC_API_URL: ${QUADRATIC_API_URL_EXTERNAL}
      VITE_QUADRATIC_MULTIPLAYER_URL: ${QUADRATIC_MULTIPLAYER_URL_EXTERNAL}
      VITE_QUADRATIC_CONNECTION_URL: ${QUADRATIC_CONNECTION_URL_EXTERNAL}
      VITE_AUTH_TYPE: ${AUTH_TYPE}
      VITE_ORY_HOST: ${KRATOS_URL_EXTERNAL}
      VITE_WORKOS_CLIENT_ID: ${WORKOS_CLIENT_ID}
      VITE_SENTRY_AUTH_TOKEN: ${SENTRY_AUTH_TOKEN}
    ports:
      - 3000:80
    entrypoint: []
    command: >
      /bin/sh -c "/client/scripts/replace_env_vars.sh && nginx -g \"daemon off;\""
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://host.docker.internal:3000/ || exit 1"]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 10
    restart: "always"
    volumes:
      - ./docker/client:/client
      - ./docker/client/config/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/client/config/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      quadratic-api:
        condition: service_started
    profiles:
      - quadratic-client
      - frontend
      - all
    networks:
      - host
    extra_hosts:
      - "host.docker.internal:host-gateway"

  quadratic-api:
    extends:
      file: docker-compose.${ECR_OR_BUILD:-build}.yml
      service: quadratic-api
    container_name: api
    environment:
      CORS: ${QUADRATIC_API_CORS}
      AUTH_CORS: ${QUADRATIC_API_AUTH_CORS}
      DATABASE_URL: ${DATABASE_DSN}
      ENVIRONMENT: ${ENVIRONMENT}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      BILLING_AI_USAGE_LIMIT: ${BILLING_AI_USAGE_LIMIT}
      GCP_REGION: ${GCP_REGION}
      GCP_REGION_ANTHROPIC: ${GCP_REGION_ANTHROPIC}
      GCP_PROJECT_ID: ${GCP_PROJECT_ID}
      GCP_CLIENT_EMAIL: ${GCP_CLIENT_EMAIL}
      GCP_PRIVATE_KEY: ${GCP_PRIVATE_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      AZURE_OPENAI_ENDPOINT: ${AZURE_OPENAI_ENDPOINT}
      AZURE_OPENAI_API_KEY: ${AZURE_OPENAI_API_KEY}
      XAI_API_KEY: ${XAI_API_KEY}
      BASETEN_API_KEY: ${BASETEN_API_KEY}
      FIREWORKS_API_KEY: ${FIREWORKS_API_KEY}
      OPEN_ROUTER_API_KEY: ${OPEN_ROUTER_API_KEY}
      AWS_S3_REGION: ${AWS_S3_REGION}
      AWS_S3_BUCKET_NAME: ${AWS_S3_BUCKET_NAME}
      AWS_S3_ANALYTICS_BUCKET_NAME: ${AWS_S3_ANALYTICS_BUCKET_NAME}
      AWS_S3_ACCESS_KEY_ID: ${AWS_S3_ACCESS_KEY_ID}
      AWS_S3_SECRET_ACCESS_KEY: ${AWS_S3_SECRET_ACCESS_KEY}
      M2M_AUTH_TOKEN: ${M2M_AUTH_TOKEN}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      AUTH_TYPE: ${AUTH_TYPE}
      ORY_ADMIN_HOST: ${ORY_ADMIN_HOST}
      WORKOS_CLIENT_ID: ${WORKOS_CLIENT_ID}
      WORKOS_API_KEY: ${WORKOS_API_KEY}
      JWKS_URI: ${JWKS_URI}
      STORAGE_TYPE: ${STORAGE_TYPE}
      QUADRATIC_FILE_URI: ${QUADRATIC_FILES_URL_INTERNAL}
      QUADRATIC_FILE_URI_PUBLIC: ${QUADRATIC_FILES_URL_EXTERNAL}
      LICENSE_KEY: ${LICENSE_KEY}
    restart: "always"
    ports:
      - "8000:8000"
    command: bash -c "npm run prisma:migrate:deploy --workspace=quadratic-api && npm run start:prod --workspace=quadratic-api"
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - api
      - backend
      - all
    networks:
      - host
    extra_hosts:
      - "host.docker.internal:host-gateway"

  quadratic-multiplayer:
    extends:
      file: docker-compose.${ECR_OR_BUILD:-build}.yml
      service: quadratic-multiplayer
    container_name: multiplayer
    environment:
      RUST_LOG: ${QUADRATIC_MULTIPLAYER_RUST_LOG}
      MULTIPLAYER__HOST: ${QUADRATIC_MULTIPLAYER_HOST}
      MULTIPLAYER__PORT: ${QUADRATIC_MULTIPLAYER_PORT}
      MULTIPLAYER__HEARTBEAT_CHECK_S: ${QUADRATIC_MULTIPLAYER_HEARTBEAT_CHECK_S}
      MULTIPLAYER__HEARTBEAT_TIMEOUT_S: ${QUADRATIC_MULTIPLAYER_HEARTBEAT_TIMEOUT_S}
      MULTIPLAYER__QUADRATIC_API_URI: ${QUADRATIC_API_URL_INTERNAL}
      MULTIPLAYER__M2M_AUTH_TOKEN: ${M2M_AUTH_TOKEN}
      MULTIPLAYER__ENVIRONMENT: ${ENVIRONMENT}
      MULTIPLAYER__PUBSUB_HOST: ${PUBSUB_HOST}
      MULTIPLAYER__PUBSUB_PORT: ${PUBSUB_PORT}
      MULTIPLAYER__PUBSUB_PASSWORD: ${PUBSUB_PASSWORD}
      MULTIPLAYER__PUBSUB_ACTIVE_CHANNELS: ${PUBSUB_ACTIVE_CHANNELS}
      MULTIPLAYER__JWKS_URI: ${JWKS_URI}
      MULTIPLAYER__AUTHENTICATE_JWT: true
    restart: "always"
    ports:
      - "3001:3001"
    depends_on:
      redis:
        condition: service_healthy
      # quadratic-client:
      #   condition: service_healthy
      quadratic-api:
        condition: service_started
    profiles:
      - quadratic-multiplayer
      - backend
      - all
    networks:
      - host
    extra_hosts:
      - "host.docker.internal:host-gateway"

  quadratic-files:
    extends:
      file: docker-compose.${ECR_OR_BUILD:-build}.yml
      service: quadratic-files
    container_name: files
    environment:
      RUST_LOG: ${QUADRATIC_FILES_RUST_LOG}
      FILES__HOST: ${QUADRATIC_FILES_HOST}
      FILES__PORT: ${QUADRATIC_FILES_PORT}
      FILES__FILE_CHECK_S: ${QUADRATIC_FILES_FILE_CHECK_S}
      FILES__FILES_PER_CHECK: ${QUADRATIC_FILES_FILES_PER_CHECK}
      FILES__TRUNCATE_FILE_CHECK_S: ${QUADRATIC_FILES_TRUNCATE_FILE_CHECK_S}
      FILES__TRUNCATE_TRANSACTION_AGE_DAYS: ${QUADRATIC_FILES_TRUNCATE_TRANSACTION_AGE_DAYS}
      FILES__ENVIRONMENT: ${ENVIRONMENT}
      FILES__JWKS_URI: ${JWKS_URI}
      FILES__QUADRATIC_API_URI: ${QUADRATIC_API_URL_INTERNAL}
      FILES__M2M_AUTH_TOKEN: ${M2M_AUTH_TOKEN}
      FILES__PUBSUB_HOST: ${PUBSUB_HOST}
      FILES__PUBSUB_PORT: ${PUBSUB_PORT}
      FILES__PUBSUB_PASSWORD: ${PUBSUB_PASSWORD}
      FILES__PUBSUB_ACTIVE_CHANNELS: ${PUBSUB_ACTIVE_CHANNELS}
      FILES__PUBSUB_PROCESSED_TRANSACTIONS_CHANNEL: ${PUBSUB_PROCESSED_TRANSACTIONS_CHANNEL}
      FILES__STORAGE_TYPE: ${STORAGE_TYPE}
      FILES__AWS_S3_REGION: ${AWS_S3_REGION}
      FILES__AWS_S3_BUCKET_NAME: ${AWS_S3_BUCKET_NAME}
      FILES__AWS_S3_ACCESS_KEY_ID: ${AWS_S3_ACCESS_KEY_ID}
      FILES__AWS_S3_SECRET_ACCESS_KEY: ${AWS_S3_SECRET_ACCESS_KEY}
      FILES__STORAGE_DIR: ${STORAGE_DIR}
      FILES__STORAGE_ENCRYPTION_KEYS: ${ENCRYPTION_KEY}
    restart: "always"
    ports:
      - "3002:3002"
    volumes:
      - ./docker/file-storage:/file-storage:rw
    depends_on:
      redis:
        condition: service_healthy
      quadratic-client:
        condition: service_healthy
      quadratic-api:
        condition: service_started
    profiles:
      - quadratic-files
      - backend
      - all
    networks:
      - host
    extra_hosts:
      - "host.docker.internal:host-gateway"

  quadratic-connection:
    extends:
      file: docker-compose.${ECR_OR_BUILD:-build}.yml
      service: quadratic-connection
    container_name: connection
    environment:
      RUST_LOG: ${QUADRATIC_CONNECTION_RUST_LOG}
      CONNECTION__HOST: ${QUADRATIC_CONNECTION_HOST}
      CONNECTION__PORT: ${QUADRATIC_CONNECTION_PORT}
      CONNECTION__ENVIRONMENT: ${ENVIRONMENT}
      CONNECTION__JWKS_URI: ${JWKS_URI}
      CONNECTION__QUADRATIC_API_URI: ${QUADRATIC_API_URL_INTERNAL}
      CONNECTION__M2M_AUTH_TOKEN: ${M2M_AUTH_TOKEN}
      CONNECTION__MAX_RESPONSE_BYTES: ${QUADRATIC_CONNECTION_MAX_RESPONSE_BYTES}
      CONNECTION__STATIC_IPS: ${QUADRATIC_CONNECTION_STATIC_IPS}
    restart: "always"
    ports:
      - "3003:3003"
    depends_on:
      quadratic-client:
        condition: service_healthy
      quadratic-api:
        condition: service_started
    profiles:
      - quadratic-connection
      - backend
      - all
    networks:
      - host
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # auth service - ory

  ory-auth:
    image: oryd/kratos:v1.2.0
    container_name: ory-auth
    ports:
      - "4433:4433" # public
      - "4434:4434" # admin
    command: serve -c /etc/config/kratos/kratos.yml --dev --watch-courier
    volumes:
      - ./docker/ory-auth/config:/etc/config/kratos
    environment:
      DSN: ${ORY_DSN}
      LOG_LEVEL: ${ORY_LOG_LEVEL}
    restart: unless-stopped
    depends_on:
      - postgres
      - ory-auth-migrate
    profiles:
      - ory
      - all
    networks:
      - host
    extra_hosts:
      - "host.docker.internal:host-gateway"

  ory-auth-migrate:
    image: oryd/kratos:v1.2.0
    container_name: ory-auth-migrate
    command: migrate -c /etc/config/kratos/kratos.yml sql -e --yes
    volumes:
      - ./docker/ory-auth/config:/etc/config/kratos
    environment:
      DSN: ${ORY_DSN}
    restart: on-failure
    depends_on:
      - postgres
    profiles:
      - ory
      - all
    networks:
      - host
    extra_hosts:
      - "host.docker.internal:host-gateway"

  ory-auth-node:
    image: oryd/kratos-selfservice-ui-node:v1.2.0
    container_name: ory-auth-node
    ports:
      - "4455:4455"
    environment:
      PORT: ${KRATOS_NODE_PORT}
      KRATOS_PUBLIC_URL: ${KRATOS_URL_INTERNAL}
      KRATOS_BROWSER_URL: ${KRATOS_URL_EXTERNAL}
      COOKIE_SECRET: ${KRATOS_COOKIE_SECRET}
      CSRF_COOKIE_NAME: ${KRATOS_CSRF_COOKIE_NAME}
      CSRF_COOKIE_SECRET: ${KRATOS_CSRF_COOKIE_SECRET}
    restart: on-failure
    depends_on:
      - ory-auth
    profiles:
      - ory
      - all
    networks:
      - host
    extra_hosts:
      - "host.docker.internal:host-gateway"

  ory-auth-mail:
    image: oryd/mailslurper:latest-smtps
    container_name: ory-auth-mail
    ports:
      - "1025:1025"
      - "4436:4436"
      - "4437:4437"
      - "8080:8080"
    profiles:
      - ory
      - all
    networks:
      - host
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # databases to be used for testing by the connection service - postgres, mysql, mssql

  postgres-connection:
    image: postgres:17.4
    restart: always
    container_name: postgres-connection
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: postgres-connection
      POSTGRES_USER: user
      PGUSER: user
      POSTGRES_PASSWORD: password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d postgres-connection"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./docker/postgres-connection/data:/var/lib/postgresql/data
      - ./docker/postgres-connection/scripts:/docker-entrypoint-initdb.d
    profiles:
      - quadratic-connection
      - quadratic-connection-db
      - quadratic-connection-db-postgres

  ssh-postgres-connection:
    build:
      context: .
      dockerfile: docker/ssh-postgres-connection/Dockerfile
    restart: always
    container_name: ssh-postgres-connection
    ports:
      - "2222:22"
    environment:
      POSTGRES_DB: ssh-postgres-connection
      POSTGRES_USER: user
      PGUSER: user
      POSTGRES_PASSWORD: password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d ssh-postgres-connection"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./docker/ssh-postgres-connection/data:/var/lib/postgresql/data
      - ./docker/ssh-postgres-connection/scripts:/docker-entrypoint-initdb.d
    profiles:
      - quadratic-connection
      - quadratic-connection-db
      - quadratic-connection-db-postgres-ssh

  mysql-connection:
    image: mysql:8
    restart: always
    container_name: mysql-connection
    ports:
      - 3306:3306
    environment:
      MYSQL_DATABASE: mysql-connection
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./docker/mysql-connection/data:/var/lib/mysql
      - ./docker/mysql-connection/scripts:/docker-entrypoint-initdb.d/
    profiles:
      - quadratic-connection
      - quadratic-connection-db
      - quadratic-connection-db-mysql

  ssh-mysql-connection:
    build:
      context: .
      dockerfile: docker/ssh-mysql-connection/Dockerfile
    restart: always
    container_name: ssh-mysql-connection
    ports:
      - "2223:22"
    environment:
      MYSQL_DATABASE: mysql-connection
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: password
    volumes:
      - ./docker/ssh-mysql-connection/data:/var/opt/mssql
      - ./docker/ssh-mysql-connection/scripts:/docker-entrypoint-initdb.d/
    profiles:
      - quadratic-connection
      - quadratic-connection-db
      - quadratic-connection-db-mysql-ssh

  mariadb-connection:
    image: mariadb:latest
    restart: always
    container_name: mariadb-connection
    ports:
      - 13306:3306
    environment:
      MARIADB_DATABASE: mariadb-connection
      MARIADB_USER: user
      MARIADB_PASSWORD: password
      MARIADB_ROOT_PASSWORD: password
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./docker/mariadb-connection/data:/var/lib/mysql
      - ./docker/mariadb-connection/scripts:/docker-entrypoint-initdb.d
    profiles:
      - quadratic-connection
      - quadratic-connection-db
      - quadratic-connection-db-mariadb

      # This service covers non-ssh mssql connections as well since it's a complex build
  ssh-mssql-connection:
    build:
      context: .
      # platforms:
      #   - "linux/amd64"
      dockerfile: docker/ssh-mssql-connection/Dockerfile
    restart: always
    container_name: ssh-mssql-connection
    ports:
      - "1433:1433"
      - "2224:22"
    environment:
      MSSQL_SA_PASSWORD: yourStrong(!)Password
      # MSSQL_PID: Evaluation
    volumes:
      - ./docker/ssh-mssql-connection/data:/var/opt/mssql
      - ./docker/ssh-mssql-connection/scripts:/docker-entrypoint-initdb.d/
    profiles:
      - quadratic-connection
      - quadratic-connection-db
      - quadratic-connection-db-mssql
      - quadratic-connection-db-mssql-ssh

  bigquery-connection:
    image: ghcr.io/goccy/bigquery-emulator:latest
    platform: linux/x86_64
    restart: always
    container_name: bigquery-connection
    command: |
      --project=test --data-from-yaml=/work/data.yaml
    ports:
      - "9050:9050"
      - "9060:9060"
    volumes:
      - ./docker/bigquery-connection/setup:/work
    working_dir: /work
    profiles:
      - quadratic-connection
      - quadratic-connection-db
      - quadratic-connection-db-bigquery

  cockraochdb-connection:
    image: cockroachdb/cockroach:latest
    restart: always
    container_name: cockroachdb-connection
    environment:
      COCKROACH_DATABASE: cockroachdb_connection
      # COCKROACH_USER: user
      # COCKROACH_PASSWORD: password
    ports:
      - "26257:26257"
    command: start-single-node --insecure
    healthcheck:
      test: ["CMD", "cockroach", "node", "status", "--insecure"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./docker/cockroachdb-connection/data:/cockroach/cockroach-data
      - ./docker/cockroachdb-connection/scripts:/docker-entrypoint-initdb.d
    profiles:
      - quadratic-connection
      - quadratic-connection-db
      - quadratic-connection-db-cockroachdb

networks:
  host:
