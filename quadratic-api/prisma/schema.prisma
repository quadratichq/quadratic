generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        Int         @id @default(autoincrement())
    auth0_id  String      @unique
    files     File[]
    QFeedback QFeedback[]
}

enum LinkPermission {
    NOT_SHARED
    READONLY
    EDIT
}

model File {
    id                 Int            @id @default(autoincrement())
    uuid               String         @unique @default(uuid())
    name               String
    created_date       DateTime       @default(now())
    updated_date       DateTime       @default(now())
    deleted            Boolean        @default(false)
    deleted_date       DateTime?
    // Binary file contents
    contents           Bytes
    // Permissions
    owner              User           @relation(fields: [ownerUserId], references: [id])
    ownerUserId        Int
    public_link_access LinkPermission @default(NOT_SHARED)
    // analytics fields
    times_updated      Int            @default(1)
    version            String?
}

model QFeedback {
    id           Int      @id @default(autoincrement())
    feedback     String
    created_date DateTime @default(now())
    qUserId      Int? // Linked to the old QUser object
    userId       Int?
    user         User?    @relation(fields: [userId], references: [id])
}

// !!Legacy user model
// use User instead
model QUser {
    id            Int     @id @default(autoincrement())
    auth0_user_id String? @unique
    QFile         QFile[]
}

// !!Legacy user model
// use File instead
model QFile {
    id            Int      @id @default(autoincrement())
    uuid          String   @unique @default(uuid())
    user_owner    QUser    @relation(fields: [qUserId], references: [id])
    name          String
    contents      Json
    created_date  DateTime @default(now())
    updated_date  DateTime @default(now())
    qUserId       Int
    // analytics fields
    times_updated Int      @default(1)
    version       String?
}

// model Team {
//     id       Int    @id @default(autoincrement())
//     name     String
//     logo     Image?
// }

// enum SharePermission {
//     READONLY
//     EDIT
// }

// model UserFileAccess {
//   id Int
//   userId    Int
//   fileId    Int
//   user      User      @relation(fields: [userId], references: [id])
//   file      File      @relation(fields: [fileId], references: [id])
//   permission SharePermission @default(READONLY)

//   @@unique([userId, fileId])
// }

// model TeamFileAccess {
//   id Int
//   teamID    Int
//   fileId    Int
//   team      Team      @relation(fields: [teamID], references: [id])
//   file      File      @relation(fields: [fileId], references: [id])
//   permission SharePermission @default(READONLY)

//   @@unique([userId, fileId])
// }

// Permission Logic
// Public Link Access: Check the share_link column in the files table.
// Direct User Access: Check for a row in UserFileAccess with the user's ID.
// Team Access: Check for a row in TeamFileAccess with a team ID that the user is a part of.
