name: Build and Publish Images to ECR

on:
  push:
    branches:
      - main

concurrency:
  group: production-publish-images

jobs:
  publish_images:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - service: client
            runner: blacksmith-4vcpu-ubuntu-2404
          - service: api
            runner: blacksmith-2vcpu-ubuntu-2404
          - service: connection
            runner: blacksmith-4vcpu-ubuntu-2404
          - service: files
            runner: blacksmith-4vcpu-ubuntu-2404
          - service: multiplayer
            runner: blacksmith-4vcpu-ubuntu-2404
          - service: cloud-controller
            runner: blacksmith-4vcpu-ubuntu-2404
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Pyodide
        id: cache-pyodide
        if: matrix.service == 'client'
        uses: useblacksmith/cache@v5
        with:
          path: quadratic-client/public/pyodide
          key: pyodide-${{ hashFiles('quadratic-client/download-pyodide.sh') }}

      - name: Download & Verify Pyodide
        if: matrix.service == 'client'
        run: |
          npm run client:download:pyodide

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR Public
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Get Public ECR URL
        id: get-ecr-url
        run: |
          REPO_NAME=quadratic-${{ matrix.service }}
          aws ecr-public create-repository --repository-name $REPO_NAME || true
          REPO_INFO=$(aws ecr-public describe-repositories --repository-names $REPO_NAME)
          ECR_URL=$(echo $REPO_INFO | jq -r '.repositories[0].repositoryUri')
          echo "ECR_URL=$ECR_URL" >> $GITHUB_OUTPUT

      - name: Read VERSION file
        id: version
        run: echo "VERSION=$(cat VERSION)" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Cache Docker layers
        uses: useblacksmith/cache@v5
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.service }}-${{ hashFiles(format('quadratic-{0}/Dockerfile', matrix.service)) }}-qa-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.service }}-${{ hashFiles(format('quadratic-{0}/Dockerfile', matrix.service)) }}-qa-

      - name: Build, Tag, and Push Image to Amazon ECR Public
        uses: docker/build-push-action@v6
        with:
          context: .
          file: quadratic-${{ matrix.service }}/Dockerfile
          push: true
          tags: |
            ${{ steps.get-ecr-url.outputs.ECR_URL }}:latest
            ${{ steps.get-ecr-url.outputs.ECR_URL }}:${{ steps.version.outputs.VERSION }}
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max,compression=zstd,force-compression=true
          cache-from: type=local,src=/tmp/.buildx-cache
