name: Preview

on:
  pull_request:
    types: [opened, synchronize, reopened]

concurrency:
  group: pr-${{ github.event.pull_request.number }}-build-deploy-test
  cancel-in-progress: true

jobs:
  create_deployment:
    name: Create Deployment
    permissions:
      contents: read
      pull-requests: write
      issues: write
      deployments: write
    runs-on: blacksmith-2vcpu-ubuntu-2204
    if: github.head_ref != 'qa' || github.base_ref != 'main'
    timeout-minutes: 5
    outputs:
      deployment_id: ${{ steps.deployment.outputs.id }}
    steps:
      - name: Find Build & Deploy Images Comment
        uses: peter-evans/find-comment@v3
        id: preview-build-deploy-images-comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: "Preview - Build, Deploy & Tests-E2E"

      - name: Create initial status comment
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ steps.preview-build-deploy-images-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## Preview - Build, Deploy & Tests-E2E
            ‚è≥ Building images...
            ‚è≥ Deploy images
            ‚è≥ Tests-E2E

            üîç Track progress in the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          edit-mode: replace

      - name: Deactivate previous deployments
        run: |
          gh api \
            --method GET \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/deployments \
            -f ref="${{ github.event.pull_request.head.ref }}" \
            -f environment=preview-pr-${{ github.event.pull_request.number }} \
            --jq '.[] | .id' | while read -r id; do
              gh api \
                --method POST \
                -H "Accept: application/vnd.github+json" \
                /repos/${{ github.repository }}/deployments/$id/statuses \
                -f state="inactive" \
                -f environment="preview-pr-${{ github.event.pull_request.number }}" \
                -f description="Superseded by newer deployment"
            done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create deployment
        id: deployment
        run: |
          DEPLOYMENT_ID=$(gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/deployments \
            -f ref="${{ github.event.pull_request.head.ref }}" \
            -f description="Building and deploying PR #${{ github.event.pull_request.number }} (${GITHUB_SHA::7})" \
            -F auto_merge=false \
            -f required_contexts\[\] \
            -f environment=preview-pr-${{ github.event.pull_request.number }} \
            -F transient_environment=true \
            -F production_environment=false \
            --jq '.id')
          echo "id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update deployment status (building images)
        run: |
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/deployments/${{ steps.deployment.outputs.id }}/statuses \
            -f state="in_progress" \
            -f description="Building Docker images..." \
            -f environment=preview-pr-${{ github.event.pull_request.number }} \
            -f log_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_images:
    name: Build Images
    needs: create_deployment
    permissions:
      contents: read
      pull-requests: write
      issues: write
      deployments: write
    runs-on: ${{ matrix.runner }}
    if: github.head_ref != 'qa' || github.base_ref != 'main'
    timeout-minutes: 30
    outputs:
      version: ${{ steps.read-version.outputs.version }}
    strategy:
      matrix:
        include:
          - service: client
            runner: blacksmith-4vcpu-ubuntu-2204
          - service: api
            runner: blacksmith-2vcpu-ubuntu-2204
          - service: connection
            runner: blacksmith-4vcpu-ubuntu-2204
          - service: files
            runner: blacksmith-4vcpu-ubuntu-2204
          - service: multiplayer
            runner: blacksmith-4vcpu-ubuntu-2204
      fail-fast: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read version
        id: read-version
        if: matrix.service == 'client'
        run: |
          VERSION=$(cat VERSION)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Cache Pyodide
        if: matrix.service == 'client'
        uses: useblacksmith/cache@v5
        with:
          path: quadratic-client/public/pyodide
          key: pyodide-${{ hashFiles('quadratic-client/download-pyodide.sh') }}

      - name: Download & Verify Pyodide
        if: matrix.service == 'client'
        run: |
          npm run client:download:pyodide

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEVELOPMENT }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEVELOPMENT }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR Private
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Define repository name
        id: repo-name
        run: |
          echo "REPO_NAME=quadratic-${{ matrix.service }}" >> $GITHUB_OUTPUT

      - name: Create Private ECR Repository
        id: create-ecr
        env:
          REPO_NAME: ${{ steps.repo-name.outputs.REPO_NAME }}
        run: |
          # Try to describe the repository first
          if ! aws ecr describe-repositories --repository-names $REPO_NAME 2>/dev/null; then
            # Repository doesn't exist, create it
            aws ecr create-repository --repository-name $REPO_NAME || true
          fi

          # Get the repository URI either way
          REPO_INFO=$(aws ecr describe-repositories --repository-names $REPO_NAME)
          ECR_URL=$(echo $REPO_INFO | jq -r '.repositories[0].repositoryUri')
          echo "ECR_URL=$ECR_URL" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: quadratic-${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.create-ecr.outputs.ECR_URL }}:pr-${{ github.event.pull_request.number }}
          cache-to: type=registry,mode=max,image-manifest=true,oci-mediatypes=true,compression=zstd,force-compression=true,ref=${{ steps.create-ecr.outputs.ECR_URL }}:pr-${{ github.event.pull_request.number }}-build-cache
          cache-from: type=registry,ref=${{ steps.create-ecr.outputs.ECR_URL }}:pr-${{ github.event.pull_request.number }}-build-cache

      - name: Find Build & Deploy Images Comment
        if: failure()
        uses: peter-evans/find-comment@v3
        id: preview-build-deploy-images-comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: "Preview - Build, Deploy & Tests-E2E"

      - name: Update comment on build images failure
        if: failure()
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ steps.preview-build-deploy-images-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## Preview - Build, Deploy & Tests-E2E
            ‚ùå Build images
            ‚ùå Deploy images
            ‚ùå Tests-E2E

            üîç Please check the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.
          edit-mode: replace

      - name: Update deployment status (failure)
        if: failure()
        run: |
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/deployments/${{ needs.create_deployment.outputs.deployment_id }}/statuses \
            -f state="failure" \
            -f description="Failed to build ${{ matrix.service }} image" \
            -f environment=preview-pr-${{ github.event.pull_request.number }} \
            -f log_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy_images:
    name: Deploy Images
    needs: [create_deployment, build_images]
    permissions:
      contents: read
      pull-requests: write
      issues: write
      deployments: write
    runs-on: blacksmith-2vcpu-ubuntu-2204
    if: github.head_ref != 'qa' || github.base_ref != 'main'
    timeout-minutes: 30
    outputs:
      WEBSITE_URL: ${{ steps.deploy-metadata.outputs.WEBSITE_URL }}
      DEPLOY_TIME: ${{ steps.deploy-metadata.outputs.DEPLOY_TIME }}
    env:
      STACK_NAME: pr-${{ github.event.pull_request.number }}
      MAX_ATTEMPTS: 50
    steps:
      - name: Find Build & Deploy Images Comment
        uses: peter-evans/find-comment@v3
        id: preview-build-deploy-images-comment-start
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: "Preview - Build, Deploy & Tests-E2E"

      - name: Update comment on deploy images start
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ steps.preview-build-deploy-images-comment-start.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## Preview - Build, Deploy & Tests-E2E
            ‚úÖ Build images
            ‚è≥ Deploying images...
            ‚è≥ Tests-E2E

            üîç Track progress in the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          edit-mode: replace

      - name: Update deployment status (deploying)
        run: |
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/deployments/${{ needs.create_deployment.outputs.deployment_id }}/statuses \
            -f state="in_progress" \
            -f description="Deploying images..." \
            -f environment=preview-pr-${{ github.event.pull_request.number }} \
            -f log_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEVELOPMENT }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEVELOPMENT }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Wait for stack deployment
        id: check-stack
        run: |
          ATTEMPTS=0
          echo "Waiting for stack deployment..."
          while [ $ATTEMPTS -lt ${{ env.MAX_ATTEMPTS }} ]; do
            if ! STATUS=$(aws cloudformation describe-stacks \
              --stack-name ${{ env.STACK_NAME }} \
              --query 'Stacks[0].StackStatus' \
              --output text 2>&1); then
              echo "Error getting stack status: $STATUS"
              echo "Stack might not exist yet. Waiting..."
              sleep 30
              ATTEMPTS=$((ATTEMPTS + 1))
              continue
            fi

            echo "Current stack status: $STATUS"

            # Fail if stack is in a failed or rollback state
            if [[ $STATUS == *FAILED* ]] || [[ $STATUS == *ROLLBACK* ]]; then
              echo "::error::Stack is in a failed or rollback state: $STATUS"
              exit 1
            fi

            # Continue if stack is ready
            if [[ $STATUS == "CREATE_COMPLETE" ]] || [[ $STATUS == "UPDATE_COMPLETE" ]]; then
              echo "::notice::Stack is ready with status: $STATUS"
              break
            fi

            # Wait and check again if stack is still being created/updated
            if [[ $STATUS == *IN_PROGRESS* ]]; then
              echo "Stack operation in progress. Waiting 30 seconds..."
              sleep 30
              ATTEMPTS=$((ATTEMPTS + 1))
              continue
            fi
          done

          if [ $ATTEMPTS -eq ${{ env.MAX_ATTEMPTS }} ]; then
            echo "::error::Timeout waiting for stack to be ready"
            exit 1
          fi

      - name: Get EC2 Instance ID
        id: get-instance
        run: |
          INSTANCE_ID=$(aws cloudformation describe-stack-resources \
            --stack-name ${{ env.STACK_NAME }} \
            --logical-resource-id EC2Instance \
            --query 'StackResources[0].PhysicalResourceId' \
            --output text)
          if [ -z "$INSTANCE_ID" ]; then
            echo "::error::Failed to get EC2 instance ID"
            exit 1
          fi
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT

      - name: Wait for instance to be ready
        run: |
          aws ec2 wait instance-status-ok \
            --instance-ids ${{ steps.get-instance.outputs.instance_id }}

      - name: Run deployment script on EC2
        id: deploy
        run: |
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids ${{ steps.get-instance.outputs.instance_id }} \
            --document-name "AWS-RunShellScript" \
            --parameters commands=["cd /quadratic-selfhost && ./login.sh && ./pull_start.sh"] \
            --comment "Deploying new images after build" \
            --query 'Command.CommandId' \
            --output text)

          # Wait for command completion
          ATTEMPTS=0
          echo "Waiting for deployment command to complete..."
          while [ $ATTEMPTS -lt ${{ env.MAX_ATTEMPTS }} ]; do
            ATTEMPTS=$((ATTEMPTS + 1))

            STATUS=$(aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id ${{ steps.get-instance.outputs.instance_id }} \
              --query "Status" \
              --output text 2>/dev/null || echo "Pending")

            echo "$ATTEMPTS/${{ env.MAX_ATTEMPTS }} - Command status: $STATUS"

            if [ "$STATUS" = "Success" ]; then
              echo "Deployment completed successfully"
              exit 0
            elif [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Cancelled" ] || [ "$STATUS" = "TimedOut" ]; then
              echo "Deployment failed with status: $STATUS"

              # Get command output for debugging
              aws ssm get-command-invocation \
                --command-id "$COMMAND_ID" \
                --instance-id ${{ steps.get-instance.outputs.instance_id }} \
                --query "StandardOutputContent" \
                --output text

              exit 1
            fi

            [ $ATTEMPTS -lt ${{ env.MAX_ATTEMPTS }} ] && sleep 30
          done

          echo "Deployment timed out after ${{ env.MAX_ATTEMPTS }} attempts"
          exit 1

      - name: Generate Deploy Metadata
        id: deploy-metadata
        run: |
          # Sanitize branch name for DNS
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          SANITIZED_BRANCH_NAME=$(echo "$BRANCH_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g' | sed 's/-\+/-/g' | sed 's/^-\|-$//')

          echo "WEBSITE_URL=${SANITIZED_BRANCH_NAME}.quadratic-preview.com" >> $GITHUB_OUTPUT
          echo "DEPLOY_TIME=$(date -u +'%b %d, %Y at %I:%M %p UTC')" >> $GITHUB_OUTPUT

      - name: Find Build & Deploy Images Comment
        if: always()
        uses: peter-evans/find-comment@v3
        id: preview-build-deploy-images-comment-update
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: "Preview - Build, Deploy & Tests-E2E"

      - name: Update comment on deploy images success
        if: success()
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ steps.preview-build-deploy-images-comment-update.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## Preview - Build, Deploy & Tests-E2E
            ‚úÖ Build images
            ‚úÖ Deploy images - ${{ steps.deploy-metadata.outputs.DEPLOY_TIME }} - [Preview](https://${{ steps.deploy-metadata.outputs.WEBSITE_URL }})
            ‚è≥ Tests-E2E

            üîç Please check the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.
          edit-mode: replace

      - name: Update comment on deploy images failure
        if: failure()
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ steps.preview-build-deploy-images-comment-update.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## Preview - Build, Deploy & Tests-E2E
            ‚úÖ Build images
            ‚ùå Deploy images
            ‚ùå Tests-E2E

            üîç Please check the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.
          edit-mode: replace

      - name: Update deployment status (success)
        if: success()
        run: |
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/deployments/${{ needs.create_deployment.outputs.deployment_id }}/statuses \
            -f state="success" \
            -f environment_url="https://${{ steps.deploy-metadata.outputs.WEBSITE_URL }}" \
            -f description="Deployment successful!" \
            -f environment=preview-pr-${{ github.event.pull_request.number }} \
            -f log_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update deployment status (failure)
        if: failure()
        run: |
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/deployments/${{ needs.create_deployment.outputs.deployment_id }}/statuses \
            -f state="failure" \
            -f description="Deployment failed" \
            -f environment=preview-pr-${{ github.event.pull_request.number }} \
            -f log_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  verify_deployed_version:
    name: Verify Version
    needs: [build_images, deploy_images]
    runs-on: blacksmith-2vcpu-ubuntu-2204
    if: github.head_ref != 'qa' || github.base_ref != 'main'
    timeout-minutes: 30
    strategy:
      matrix:
        service:
          - name: client
            url: "https://${{ needs.deploy_images.outputs.WEBSITE_URL }}/version.json"
          - name: api
            url: "https://api.${{ needs.deploy_images.outputs.WEBSITE_URL }}/health"
          - name: multiplayer
            url: "https://multiplayer.${{ needs.deploy_images.outputs.WEBSITE_URL }}/health"
          - name: connection
            url: "https://connection.${{ needs.deploy_images.outputs.WEBSITE_URL }}/health"
          - name: files
            url: "https://files.${{ needs.deploy_images.outputs.WEBSITE_URL }}/health"
      fail-fast: false
    env:
      EXPECTED_VERSION: ${{ needs.build_images.outputs.version }}
      MAX_ATTEMPTS: 50
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          sparse-checkout: |
            .github/actions/verify-version
          sparse-checkout-cone-mode: false
          fetch-tags: false
          submodules: false
          lfs: false

      - name: Verify ${{ matrix.service.name }} version
        uses: ./.github/actions/verify-version
        with:
          service_name: ${{ matrix.service.name }}
          service_url: ${{ matrix.service.url }}
          expected_version: ${{ env.EXPECTED_VERSION }}
          max_attempts: ${{ env.MAX_ATTEMPTS }}

  test-e2e-start-comment:
    name: Tests-E2E - Generate Matrix and Start Comment
    needs: [build_images, deploy_images, verify_deployed_version]
    permissions:
      contents: read
      pull-requests: write
      issues: write
    runs-on: blacksmith-2vcpu-ubuntu-2204
    if: github.head_ref != 'qa' || github.base_ref != 'main'
    timeout-minutes: 15
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
    env:
      matrix_runner: 156
      e2e_url: ${{ needs.deploy_images.outputs.WEBSITE_URL }}
      deploy_time: ${{ needs.deploy_images.outputs.DEPLOY_TIME }}
    steps:
      - name: Generate Test Matrix
        id: generate-matrix
        run: |
          # Create a matrix with shardIndex values from 1 to matrix_runner
          matrix=$(python -c "import json; print(json.dumps({'shardIndex': list(range(1, ${{ env.matrix_runner }} + 1)), 'shardTotal': [${{ env.matrix_runner }}]}))" | tr -d '\n')
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          echo "Generated matrix: $matrix"

      - name: Find Build & Deploy Images Comment
        uses: peter-evans/find-comment@v3
        id: test-e2e-start-comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: "Preview - Build, Deploy & Tests-E2E"

      - name: Update comment on E2E tests start
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ steps.test-e2e-start-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## Preview - Build, Deploy & Tests-E2E
            ‚úÖ Build images
            ‚úÖ Deploy images - ${{ env.deploy_time }} - [Preview](https://${{ env.e2e_url }})
            ‚è≥ Tests-E2E running...

            üîç Please check the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.
          edit-mode: replace

  test-e2e-matrix-run:
    name: Tests-E2E - Matrix Run, Shard
    needs:
      [
        build_images,
        deploy_images,
        verify_deployed_version,
        test-e2e-start-comment,
      ]
    runs-on: blacksmith-2vcpu-ubuntu-2204
    container:
      image: mcr.microsoft.com/playwright:v1.52.0-noble
      options: --user root
    if: github.head_ref != 'qa' || github.base_ref != 'main'
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.test-e2e-start-comment.outputs.matrix) }}
    env:
      e2e_url: ${{ needs.deploy_images.outputs.WEBSITE_URL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          sparse-checkout: |
            .github/actions/tests-e2e
          sparse-checkout-cone-mode: false
          fetch-tags: false
          submodules: false
          lfs: false

      - name: Run tests e2e
        uses: ./.github/actions/tests-e2e
        id: run-tests-e2e
        with:
          e2e_url: "https://${{ env.e2e_url }}"
          shard_index: ${{ matrix.shardIndex }}
          shard_total: ${{ matrix.shardTotal }}

  test-e2e-merge-report-and-end-comment:
    name: Tests-E2E - Generate Report and End Comment
    needs:
      [
        build_images,
        deploy_images,
        verify_deployed_version,
        test-e2e-start-comment,
        test-e2e-matrix-run,
      ]
    permissions:
      contents: read
      pull-requests: write
      issues: write
    runs-on: blacksmith-2vcpu-ubuntu-2204
    if: always() && needs.test-e2e-start-comment.result == 'success' && (github.head_ref != 'qa' || github.base_ref != 'main')
    timeout-minutes: 15
    env:
      e2e_url: ${{ needs.deploy_images.outputs.WEBSITE_URL }}
      deploy_time: ${{ needs.deploy_images.outputs.DEPLOY_TIME }}
      s3_bucket: e2e.quadratic-preview.com
    steps:
      - name: Checkout code
        if: ${{ !cancelled() }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          sparse-checkout: |
            test/e2e
          sparse-checkout-cone-mode: false
          fetch-tags: false
          submodules: false
          lfs: false

      - name: Setup Node
        if: ${{ !cancelled() }}
        uses: useblacksmith/setup-node@v5
        with:
          node-version: 24

      - name: Install Dependencies
        if: ${{ !cancelled() }}
        run: cd test/e2e && npm install

      - name: Download and merge all blobs into HTML report
        if: ${{ !cancelled() }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create temp directory for download
          mkdir -p temp-download

          # Download all matching artifacts
          gh run download ${{ github.run_id }} \
            --repo ${{ github.repository }} \
            --pattern "blob-report-${{ github.run_id }}-*" \
            --dir temp-download

          # Create the target directory
          mkdir -p all-blob-reports

          # Move all files from subdirectories to the target directory
          find temp-download -type f -exec mv {} all-blob-reports/ \;

          # Clean up
          rm -rf temp-download

          # Verify download
          echo "Downloaded $(find all-blob-reports -type f | wc -l) files"

      - name: Merge into HTML Report
        if: ${{ !cancelled() }}
        run: npx playwright merge-reports --reporter html ./all-blob-reports

      - name: Configure AWS Credentials
        if: ${{ !cancelled() }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEVELOPMENT }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEVELOPMENT }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload HTML report to S3
        if: ${{ !cancelled() }}
        run: |
          # Upload entire build directory to S3
          aws s3 sync playwright-report s3://${{ env.s3_bucket }}/pr-${{ github.event.pull_request.number }} \
            --delete \
            --cache-control "public, max-age=30"

      - name: Find Build & Deploy Images Comment
        if: always()
        uses: peter-evans/find-comment@v3
        id: test-e2e-merge-report-and-end-comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: "Preview - Build, Deploy & Tests-E2E"

      - name: Update comment on E2E tests end
        if: ${{ !cancelled() }}
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ steps.test-e2e-merge-report-and-end-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## Preview - Build, Deploy & Tests-E2E
            ‚úÖ Build images
            ‚úÖ Deploy images - ${{ env.deploy_time }} - [Preview](https://${{ env.e2e_url }})
            ${{ needs.test-e2e-matrix-run.result == 'success' && '‚úÖ' || '‚ùå' }} Tests-E2E  -  [Report](http://${{ env.s3_bucket }}.s3-website-us-west-2.amazonaws.com/pr-${{ github.event.pull_request.number }}/)
          edit-mode: replace

      - name: Update comment on E2E tests end
        if: cancelled()
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ steps.test-e2e-merge-report-and-end-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## Preview - Build, Deploy & Tests-E2E
            ‚úÖ Build images
            ‚úÖ Deploy images - ${{ env.deploy_time }} - [Preview](https://${{ env.e2e_url }})
            ‚ùå Tests-E2E - [Cancelled](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          edit-mode: replace
