name: QA

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

jobs:
  build_client:
    name: Build Client
    runs-on: blacksmith-4vcpu-ubuntu-2204
    if: github.head_ref == 'qa' && github.base_ref == 'main'
    concurrency:
      group: qa-build-client
      cancel-in-progress: true
    timeout-minutes: 60
    outputs:
      version: ${{ steps.read-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read version
        id: read-version
        run: |
          VERSION=$(cat VERSION)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Cache Pyodide
        id: cache-pyodide
        uses: useblacksmith/cache@v5
        with:
          path: quadratic-client/public/pyodide
          key: pyodide-${{ hashFiles('quadratic-client/download-pyodide.sh') }}

      - name: Download & Verify Pyodide
        run: |
          npm run client:download:pyodide

      - name: Pull Pulumi ESC Environment Variables
        id: pull-pulumi-esc-env-vars
        run: |
          # Install Pulumi ESC CLI
          curl -fsSL https://get.pulumi.com/esc/install.sh | sh
          export PATH="$HOME/.pulumi/bin:$PATH"

          # Login and get environment variables
          esc login
          ENV_VARS=$(esc env open quadratic/default/${PULUMI_ESC_ENVIRONMENT_NAME} --format dotenv)

          # Write to client.env file to be used in Dockerfile
          echo "$ENV_VARS" > ./quadratic-client/client.env
          # Remove quotes if present
          sed -i 's/"//g' ./quadratic-client/client.env

          # Create hash from environment variables
          ENV_HASH=$(echo "$ENV_VARS" | sha256sum | cut -d' ' -f1)
          echo "env-hash=$ENV_HASH" >> $GITHUB_OUTPUT
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PULUMI_ESC_ENVIRONMENT_NAME: quadratic-client-development

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEVELOPMENT }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEVELOPMENT }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Cache Docker layers
        uses: useblacksmith/cache@v5
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-client-${{ hashFiles('quadratic-client/Dockerfile') }}-qa-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-client-${{ hashFiles('quadratic-client/Dockerfile') }}-qa-

      - name: Build using Docker
        uses: docker/build-push-action@v6
        with:
          context: .
          file: quadratic-client/Dockerfile
          push: false
          load: true
          tags: quadratic-client-development:local
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max,compression=zstd,force-compression=true
          cache-from: type=local,src=/tmp/.buildx-cache
          build-args: |
            ENV_HASH=${{ steps.pull-pulumi-esc-env-vars.outputs.env-hash }}
          outputs: type=docker

      - name: Copy build from container to host
        run: |
          # Create a temporary container from the image
          CONTAINER_ID=$(docker create quadratic-client-development:local)

          # Create a temporary directory to hold the build
          mkdir -p /tmp/quadratic-client-development

          # Copy the build files from the container using the correct path
          docker cp $CONTAINER_ID:/usr/share/nginx/html/. /tmp/quadratic-client-development/

          # Clean up the temporary container
          docker rm $CONTAINER_ID

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: quadratic-client-development
          path: /tmp/quadratic-client-development
          retention-days: 1
          compression-level: 6
          overwrite: true
          include-hidden-files: true
          if-no-files-found: error

  build_images:
    name: Build Images
    runs-on: ${{ matrix.runner }}
    if: github.head_ref == 'qa' && github.base_ref == 'main'
    concurrency:
      group: qa-build-images-${{ matrix.service }}
      cancel-in-progress: true
    timeout-minutes: 60
    strategy:
      matrix:
        include:
          - service: api
            runner: blacksmith-2vcpu-ubuntu-2204
          - service: connection
            runner: blacksmith-4vcpu-ubuntu-2204
          - service: files
            runner: blacksmith-4vcpu-ubuntu-2204
          - service: multiplayer
            runner: blacksmith-4vcpu-ubuntu-2204
      fail-fast: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEVELOPMENT }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEVELOPMENT }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get Private ECR URL
        id: get-ecr-url
        run: |
          REPO_NAME=quadratic-${{ matrix.service }}-development
          REPO_INFO=$(aws ecr describe-repositories --repository-names $REPO_NAME)
          ECR_URL=$(echo $REPO_INFO | jq -r '.repositories[0].repositoryUri')
          echo "ECR_URL=$ECR_URL" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Cache Docker layers
        uses: useblacksmith/cache@v5
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.service }}-${{ hashFiles(format('quadratic-{0}/Dockerfile', matrix.service)) }}-qa-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.service }}-${{ hashFiles(format('quadratic-{0}/Dockerfile', matrix.service)) }}-qa-

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: quadratic-${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.get-ecr-url.outputs.ECR_URL }}:pr-qa
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max,compression=zstd,force-compression=true
          cache-from: type=local,src=/tmp/.buildx-cache

  deploy_client:
    needs: [build_client, build_images]
    name: Deploy Client to S3 + Cloudflare
    runs-on: blacksmith-2vcpu-ubuntu-2204
    if: github.head_ref == 'qa' && github.base_ref == 'main'
    concurrency:
      group: qa-deploy-client
    timeout-minutes: 60
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEVELOPMENT }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEVELOPMENT }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: quadratic-client-development
          path: /tmp/quadratic-client-development

      - name: Upload to S3
        run: |
          # Upload entire build directory to S3
          aws s3 sync /tmp/quadratic-client-development/ $S3_DIR --delete --force
        env:
          S3_DIR: s3://qa.quadratic-preview.com/

      - name: Purge Cloudflare Cache
        run: |
          response=$(curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID_DEVELOPMENT }}/purge_cache" \
          -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_KEY_DEVELOPMENT }}" \
          -H "Content-Type: application/json" \
          -d '{"purge_everything": true}')

          # Check if Purge was successful
          if echo "$response" | jq -e '.success' > /dev/null; then
            echo "Successfully purged Cloudflare cache"
          else
            echo "Failed to purge Cloudflare cache: $response"
            exit 1
          fi

  deploy_infra:
    needs: [build_client, build_images]
    name: Update Infrastructure with Pulumi
    runs-on: blacksmith-2vcpu-ubuntu-2204
    if: github.head_ref == 'qa' && github.base_ref == 'main'
    concurrency:
      group: qa-deploy-infra
    timeout-minutes: 60
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: useblacksmith/setup-node@v5
        with:
          node-version: 24

      - name: Setup Pulumi
        uses: pulumi/actions@v4

      - name: Update Pulumi Infrastructure
        working-directory: infra
        run: |
          npm install

          pulumi org set-default quadratic

          if ! pulumi stack ls | grep -q "^$STACK_NAME"; then
            echo "Stack $STACK_NAME does not exist. Initializing..."
            pulumi stack init $STACK_NAME
          else
            echo "Stack $STACK_NAME already exists."
            pulumi stack select $STACK_NAME
          fi

          # Point to the Pulumi ESC Environment
          cat <<EOF | tee Pulumi.$STACK_NAME.yaml
          environment:
            - aws-infra-development
          EOF

          pulumi config set multiplayer-subdomain multiplayer-pr-qa
          pulumi config set files-subdomain files-pr-qa
          pulumi config set connection-subdomain connection-pr-qa
          pulumi config set docker-image-tag pr-qa
          pulumi config set quadratic-api-uri https://quadratic-staging.herokuapp.com
          pulumi config set is-preview true

          pulumi up -y
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEVELOPMENT }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEVELOPMENT }}
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          STACK_NAME: quadratic-qa

  verify_deployed_version:
    name: Verify Version
    needs: [build_client, build_images, deploy_client, deploy_infra]
    runs-on: blacksmith-2vcpu-ubuntu-2204
    if: github.head_ref == 'qa' && github.base_ref == 'main'
    concurrency:
      group: qa-verify-version-${{ matrix.service.name }}
      cancel-in-progress: true
    timeout-minutes: 30
    strategy:
      matrix:
        service:
          - name: client
            url: "https://qa.quadratic-preview.com/version.json"
          - name: api
            url: "https://quadratic-staging.herokuapp.com/health"
          - name: multiplayer
            url: "https://multiplayer-pr-qa.quadratic-preview.com/health"
          - name: connection
            url: "https://connection-pr-qa.quadratic-preview.com/health"
          - name: files
            url: "http://files-pr-qa.quadratic-preview.com/health"
      fail-fast: false
    env:
      EXPECTED_VERSION: ${{ needs.build_client.outputs.version }}
      MAX_ATTEMPTS: 50
    steps:
      - name: Verify ${{ matrix.service.name }} version
        run: |
          ATTEMPTS=0
          echo "Checking ${{ matrix.service.name }} version..."
          echo "Expected version: ${{ env.EXPECTED_VERSION }}"
          echo "Service URL: ${{ matrix.service.url }}"

          while [ $ATTEMPTS -lt ${{ env.MAX_ATTEMPTS }} ]; do
            ATTEMPTS=$((ATTEMPTS + 1))

            RESPONSE=$(curl -s -k \
              --connect-timeout 10 \
              --max-time 30 \
              -w "\n%{http_code}" \
              "${{ matrix.service.url }}" 2>&1)
            CURL_EXIT_CODE=$?

            # If curl failed, retry
            if [ $CURL_EXIT_CODE -ne 0 ]; then
              echo "$ATTEMPTS/${{ env.MAX_ATTEMPTS }} - Curl failed with exit code $CURL_EXIT_CODE"
              [ $ATTEMPTS -lt ${{ env.MAX_ATTEMPTS }} ] && sleep 30
              continue
            fi

            # Extract HTTP code and body
            HTTP_BODY=$(echo "$RESPONSE" | head -n 1)
            HTTP_CODE=$(echo "$RESPONSE" | tail -n 1)

            # Check for valid HTTP response
            if [ "$HTTP_CODE" != "200" ]; then
              echo "$ATTEMPTS/${{ env.MAX_ATTEMPTS }} - Endpoint not ready (HTTP $HTTP_CODE)"
              [ $ATTEMPTS -lt ${{ env.MAX_ATTEMPTS }} ] && sleep 30
              continue
            fi

            # Try to parse version
            DEPLOYED_VERSION=$(echo "$HTTP_BODY" | jq -r .version 2>/dev/null || echo "")

            # Check if version was successfully extracted
            if [ -z "$DEPLOYED_VERSION" ]; then
              echo "$ATTEMPTS/${{ env.MAX_ATTEMPTS }} - Invalid version format in response"
              [ $ATTEMPTS -lt ${{ env.MAX_ATTEMPTS }} ] && sleep 30
              continue
            fi

            # Compare versions
            if [ "$DEPLOYED_VERSION" = "${{ env.EXPECTED_VERSION }}" ]; then
              echo "::notice::${{ matrix.service.name }} version verified successfully"
              exit 0
            fi

            echo "$ATTEMPTS/${{ env.MAX_ATTEMPTS }} - Version mismatch, found $DEPLOYED_VERSION"
            [ $ATTEMPTS -lt ${{ env.MAX_ATTEMPTS }} ] && sleep 30
          done

          echo "::error::${{ matrix.service.name }} version check failed after ${{ env.MAX_ATTEMPTS }} attempts"
          exit 1

  qa-wolf-notify:
    needs: [deploy_client, deploy_infra, verify_deployed_version]
    name: Notify QA Wolf
    runs-on: blacksmith-2vcpu-ubuntu-2204
    if: github.head_ref == 'qa' && github.base_ref == 'main'
    concurrency:
      group: qa-wolf-notify
      cancel-in-progress: true
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for 5 minutes
        run: sleep 300

      - name: Notify deploy_success
        id: run_tests
        run: |
          curl -H "Authorization: ${{ secrets.QAW_API_KEY }}" \
          -H 'Content-Type: application/json' \
          -d '{"branch": "qa", "deployment_type": "new_qa", "commit_url": "https://github.com/quadratichq/quadratic/commit/${{ github.sha }}", "sha": "${{ github.sha }}"}' \
          https://app.qawolf.com/api/webhooks/deploy_success
