use std::fs::create_dir_all;

use quadratic_core::a1::A1Error;
use quadratic_core::a1::A1Selection;
use quadratic_core::a1::CellRefCoord;
use quadratic_core::a1::CellRefRange;
use quadratic_core::a1::CellRefRangeEnd;
use quadratic_core::a1::JsTableInfo;
use quadratic_core::a1::RefRangeBounds;
use quadratic_core::a1::TableRef;
use quadratic_core::a1::js_selection::JsCoordinate;
use quadratic_core::color::Rgba;
use quadratic_core::controller::active_transactions::transaction_name::TransactionName;
use quadratic_core::controller::execution::run_code::get_cells::JsCellsA1Error;
use quadratic_core::controller::execution::run_code::get_cells::JsCellsA1Response;
use quadratic_core::controller::execution::run_code::get_cells::JsCellsA1Value;
use quadratic_core::controller::execution::run_code::get_cells::JsCellsA1Values;
use quadratic_core::controller::operations::clipboard::PasteSpecial;
use quadratic_core::controller::transaction_types::JsCellValueResult;
use quadratic_core::controller::transaction_types::JsCodeResult;
use quadratic_core::formulas::parse_formula::JsFormulaParseResult;
use quadratic_core::grid::JsCellsAccessed;
use quadratic_core::grid::formats::Format;
use quadratic_core::grid::formats::FormatUpdate;
use quadratic_core::grid::js_types::JsChartContext;
use quadratic_core::grid::js_types::JsCodeTableContext;
use quadratic_core::grid::js_types::JsColumnWidth;
use quadratic_core::grid::js_types::JsDataTableContext;
use quadratic_core::grid::js_types::JsResponse;
use quadratic_core::grid::js_types::JsSelectionContext;
use quadratic_core::grid::js_types::JsTablesContext;
use quadratic_core::grid::js_types::{
    CellFormatSummary, JsCellValue, JsCellValuePos, JsCellValuePosContext, JsClipboard, JsCodeCell,
    JsDataTableColumnHeader, JsHtmlOutput, JsNumber, JsOffset, JsRenderCell, JsRenderCellSpecial,
    JsRenderCodeCell, JsRenderCodeCellState, JsRenderFill, JsReturnInfo, JsRowHeight, JsSheetFill,
    JsSnackbarSeverity, JsSummarizeSelectionResult, JsValidationWarning,
};
use quadratic_core::grid::sheet::borders::BorderSelection;
use quadratic_core::grid::sheet::borders::BorderSide;
use quadratic_core::grid::sheet::borders::BorderStyle;
use quadratic_core::grid::sheet::borders::BorderStyleCell;
use quadratic_core::grid::sheet::borders::BorderStyleTimestamp;
use quadratic_core::grid::sheet::borders::CellBorderLine;
use quadratic_core::grid::sheet::borders::JsBorderHorizontal;
use quadratic_core::grid::sheet::borders::JsBorderVertical;
use quadratic_core::grid::sheet::borders::JsBordersSheet;
use quadratic_core::grid::sheet::keyboard::Direction;
use quadratic_core::grid::sheet::search::SearchOptions;
use quadratic_core::grid::sheet::validations::validation::{
    Validation, ValidationError, ValidationMessage, ValidationStyle,
};
use quadratic_core::grid::sheet::validations::rules::ValidationRule;
use quadratic_core::grid::sheet::validations::rules::validation_date_time::{
    DateTimeRange, ValidationDateTime,
};
use quadratic_core::grid::sheet::validations::rules::validation_list::{
    ValidationList, ValidationListSource,
};
use quadratic_core::grid::sheet::validations::rules::validation_logical::ValidationLogical;
use quadratic_core::grid::sheet::validations::rules::validation_number::{
    NumberRange, ValidationNumber,
};
use quadratic_core::grid::sheet::validations::rules::validation_text::{
    TextCase, TextMatch, ValidationText,
};
use quadratic_core::grid::sort::DataTableSort;
use quadratic_core::grid::sort::SortDirection;
use quadratic_core::grid::{
    CellAlign, CellVerticalAlign, CellWrap, GridBounds, NumericFormat, NumericFormatKind, SheetId,
};
use quadratic_core::grid::{CodeCellLanguage, ConnectionKind};
use quadratic_core::sheet_offsets::resize_transient::TransientResize;
use quadratic_core::sheet_offsets::sheet_offsets_wasm::ColumnRow;
use quadratic_core::small_timestamp::SmallTimestamp;
use quadratic_core::wasm_bindings::controller::bounds::MinMax;
use quadratic_core::wasm_bindings::controller::sheet_info::{SheetBounds, SheetInfo};
use quadratic_core::{
    ArraySize, Axis, Pos, Rect, RunError, RunErrorMsg, SheetPos, SheetRect, Span,
};
use ts_rs::TS;

macro_rules! generate_type_declarations {
    ($($type:ty),+ $(,)?) => {
        String::new() $(+ "export " + &<$type>::decl() + "\n")+
    };
}

fn main() {
    // TODO: autogenerate this file by parsing the whole project using `syn` and
    // searching for types annotated with `#[derive(TS)]`. This still won't work
    // for types generated by `macro_rules!` macros, so we'll have to handle
    // those some other way.
    let mut s = format!("// This file is automatically generated by {}\n", file!());
    s += "// Do not modify it manually.\n\n";

    s += &generate_type_declarations!(
        A1Error,
        A1Selection,
        ArraySize,
        Axis,
        BorderSelection,
        BorderSide,
        BorderStyle,
        BorderStyleCell,
        BorderStyleTimestamp,
        JsCellsA1Error,
        JsCellsA1Response,
        JsCellsA1Value,
        JsCellsA1Values,
        JsCellValueResult,
        CellAlign,
        CellBorderLine,
        CellFormatSummary,
        CellRefCoord,
        CellRefRange,
        CellRefRangeEnd,
        CellVerticalAlign,
        CellWrap,
        CodeCellLanguage,
        ColumnRow,
        ConnectionKind,
        DataTableSort,
        DateTimeRange,
        Direction,
        Format,
        FormatUpdate,
        GridBounds,
        JsBorderHorizontal,
        JsBorderVertical,
        JsBordersSheet,
        JsCellsAccessed,
        JsCellValue,
        JsCellValuePos,
        JsCellValuePosContext,
        JsChartContext,
        JsClipboard,
        JsCodeCell,
        JsCodeResult,
        JsCodeTableContext,
        JsColumnWidth,
        JsCoordinate,
        JsDataTableColumnHeader,
        JsDataTableContext,
        JsFormulaParseResult,
        JsHtmlOutput,
        JsNumber,
        JsOffset,
        JsRenderCell,
        JsRenderCellSpecial,
        JsRenderCodeCell,
        JsRenderCodeCellState,
        JsRenderFill,
        JsResponse,
        JsReturnInfo,
        JsRowHeight,
        JsSelectionContext,
        JsSheetFill,
        JsSnackbarSeverity,
        JsSummarizeSelectionResult,
        JsTableInfo,
        JsTablesContext,
        JsValidationWarning,
        MinMax,
        NumberRange,
        NumericFormat,
        NumericFormatKind,
        PasteSpecial,
        Pos,
        Rect,
        RefRangeBounds,
        Rgba,
        RunError,
        RunErrorMsg,
        SearchOptions,
        SheetBounds,
        SheetId,
        SheetInfo,
        SheetPos,
        SheetRect,
        SmallTimestamp,
        SortDirection,
        Span,
        TableRef,
        TextCase,
        TextMatch,
        TransactionName,
        TransientResize,
        Validation,
        ValidationDateTime,
        ValidationError,
        ValidationList,
        ValidationListSource,
        ValidationLogical,
        ValidationMessage,
        ValidationNumber,
        ValidationRule,
        ValidationStyle,
        ValidationText
    );

    if create_dir_all("../quadratic-client/src/app/quadratic-core-types").is_ok() {
        std::fs::write(
            "../quadratic-client/src/app/quadratic-core-types/index.d.ts",
            s,
        )
        .expect("failed to write types file");
    }
}
