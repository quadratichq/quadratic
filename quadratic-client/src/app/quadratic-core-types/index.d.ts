// This file is automatically generated by quadratic-core/src/bin/export_types.rs
// Do not modify it manually.

export type A1Error = { "type": "InvalidCellReference", "error": string } | { "type": "InvalidSheetId", "error": string } | { "type": "InvalidSheetMap", "error": string } | { "type": "InvalidColumn", "error": string } | { "type": "InvalidSheetName", "error": string } | { "type": "InvalidSheetNameMissingQuotes", "error": string } | { "type": "InvalidRange", "error": string } | { "type": "InvalidRow", "error": string } | { "type": "SpuriousDollarSign", "error": string } | { "type": "TooManySheets", "error": string } | { "type": "MismatchedQuotes", "error": string } | { "type": "WrongCellCount", "error": string } | { "type": "InvalidExclusion", "error": string } | { "type": "TranslateInvalid", "error": string } | { "type": "SheetNotFound" } | { "type": "InvalidTableRef", "error": string } | { "type": "TableNotFound", "error": string } | { "type": "MultipleColumnDefinitions" } | { "type": "MultipleRowDefinitions" } | { "type": "UnexpectedRowNumber" } | { "type": "InvalidRowRange", "error": string } | { "type": "OutOfBounds", "error": RefError };
export interface A1Selection { sheet_id: SheetId, cursor: Pos, ranges: Array<CellRefRange>, }
export interface ArraySize { w: number, h: number, }
export type Axis = "X" | "Y";
export type BorderSelection = "all" | "inner" | "outer" | "horizontal" | "vertical" | "left" | "top" | "right" | "bottom" | "clear";
export type BorderSide = "Top" | "Bottom" | "Left" | "Right";
export interface BorderStyle { color: Rgba, line: CellBorderLine, }
export interface BorderStyleCell { top: BorderStyleTimestamp | null, bottom: BorderStyleTimestamp | null, left: BorderStyleTimestamp | null, right: BorderStyleTimestamp | null, }
export interface BorderStyleTimestamp { color: Rgba, line: CellBorderLine, timestamp: SmallTimestamp, }
export interface JsCellsA1Error { core_error: string, }
export interface JsCellsA1Response { values: JsCellsA1Values | null, error: JsCellsA1Error | null, }
export interface JsCellsA1Value { x: number, y: number, v: string, t: number, }
export interface JsCellsA1Values { cells: Array<JsCellsA1Value>, x: number, y: number, w: number, h: number, one_dimensional: boolean, two_dimensional: boolean, has_headers: boolean, }
export type JsCellValueResult = [string, number];
export type CellAlign = "center" | "left" | "right";
export type CellBorderLine = "line1" | "line2" | "line3" | "dotted" | "dashed" | "double" | "clear";
export interface CellFormatSummary { bold: boolean | null, italic: boolean | null, commas: boolean | null, textColor: string | null, fillColor: string | null, align: CellAlign | null, verticalAlign: CellVerticalAlign | null, wrap: CellWrap | null, dateTime: string | null, cellType: CellType | null, underline: boolean | null, strikeThrough: boolean | null, }
export interface CellRefCoord { coord: bigint, is_absolute: boolean, }
export type CellRefRange = { range: RefRangeBounds, } | { range: TableRef, };
export interface CellRefRangeEnd { col: CellRefCoord, row: CellRefCoord, }
export type CellVerticalAlign = "top" | "middle" | "bottom";
export type CellWrap = "overflow" | "wrap" | "clip";
export type CodeCellLanguage = "Python" | "Formula" | { "Connection": { kind: ConnectionKind, id: string, } } | "Javascript" | "Import";
export interface ColumnRow { column: number, row: number, }
export type ConnectionKind = "POSTGRES" | "MYSQL" | "MSSQL" | "SNOWFLAKE";
export interface DataTableSort { column_index: number, direction: SortDirection, }
export type DateTimeRange = { "DateRange": [bigint | null, bigint | null] } | { "DateEqual": Array<bigint> } | { "DateNotEqual": Array<bigint> } | { "TimeRange": [number | null, number | null] } | { "TimeEqual": Array<number> } | { "TimeNotEqual": Array<number> };
export type Direction = "Up" | "Down" | "Left" | "Right";
export interface Format { align: CellAlign | null, vertical_align: CellVerticalAlign | null, wrap: CellWrap | null, numeric_format: NumericFormat | null, numeric_decimals: number | null, numeric_commas: boolean | null, bold: boolean | null, italic: boolean | null, text_color: string | null, fill_color: string | null, date_time: string | null, underline: boolean | null, strike_through: boolean | null, }
export type GridBounds = { "type": "empty" } | { "type": "nonEmpty" } & Rect;
export interface JsBorderHorizontal { color: Rgba, line: CellBorderLine, x: bigint, y: bigint, width: bigint | null, unbounded: boolean, }
export interface JsBorderVertical { color: Rgba, line: CellBorderLine, x: bigint, y: bigint, height: bigint | null, unbounded: boolean, }
export interface JsBordersSheet { horizontal: Array<JsBorderHorizontal> | null, vertical: Array<JsBorderVertical> | null, }
export interface JsCellsAccessed { sheetId: string, ranges: Array<CellRefRange>, }
export interface JsCellValue { value: string, kind: string, }
export interface JsCellValuePos { value: string, kind: string, pos: string, }
export interface JsCellValuePosContext { sheet_name: string, rect_origin: string, rect_width: number, rect_height: number, starting_rect_values: Array<Array<JsCellValuePos>>, }
export interface JsChartContext { sheet_name: string, chart_name: string, bounds: string, language: CodeCellLanguage, code_string: string, spill: boolean, }
export interface JsClipboard { plainText: string, html: string, }
export interface JsCodeCell { x: bigint, y: bigint, code_string: string, language: CodeCellLanguage, std_out: string | null, std_err: string | null, evaluation_result: string | null, spill_error: Array<Pos> | null, return_info: JsReturnInfo | null, cells_accessed: Array<JsCellsAccessed> | null, }
export interface JsCodeResult { transaction_id: string, success: boolean, std_out: string | null, std_err: string | null, line_number: number | null, output_value: JsCellValueResult | null, output_array: Array<Array<JsCellValueResult>> | null, output_display_type: string | null, cancel_compute: boolean | null, chart_pixel_output: [number, number] | null, has_headers: boolean, }
export interface JsCodeTableContext { sheet_name: string, code_table_name: string, all_columns: Array<string>, visible_columns: Array<string>, first_row_visible_values: Array<JsCellValuePos>, last_row_visible_values: Array<JsCellValuePos>, bounds: string, show_name: boolean, show_columns: boolean, language: CodeCellLanguage, code_string: string, std_err: string | null, error: boolean, spill: boolean, }
export interface JsColumnWidth { column: bigint, width: number, }
export interface JsCoordinate { x: number, y: number, }
export interface JsDataTableColumnHeader { name: string, display: boolean, valueIndex: number, }
export interface JsDataTableContext { sheet_name: string, data_table_name: string, all_columns: Array<string>, visible_columns: Array<string>, first_row_visible_values: Array<JsCellValuePos>, last_row_visible_values: Array<JsCellValuePos>, bounds: string, show_name: boolean, show_columns: boolean, }
export interface JsFormulaParseResult { parse_error_msg: string | null, parse_error_span: Span | null, cells_accessed: Array<JsCellsAccessed>, spans: Array<Span>, }
export interface JsCellsA1Value { x: number, y: number, v: string, t: number, }
export interface JsHtmlOutput { sheet_id: string, x: number, y: number, w: number, h: number, html: string | null, name: string, show_name: boolean, }
export interface JsNumber { decimals: number | null, commas: boolean | null, format: NumericFormat | null, }
export interface JsOffset { column: number | null, row: number | null, size: number, }
export interface JsRenderCell { x: bigint, y: bigint, value: string, language?: CodeCellLanguage, align?: CellAlign, verticalAlign?: CellVerticalAlign, wrap?: CellWrap, bold?: boolean, italic?: boolean, textColor?: string, special?: JsRenderCellSpecial, number?: JsNumber, underline?: boolean, strikeThrough?: boolean, columnHeader?: boolean, }
export type JsRenderCellSpecial = "Chart" | "SpillError" | "RunError" | "Logical" | "Checkbox" | "List";
export interface JsRenderCodeCell { x: number, y: number, w: number, h: number, language: CodeCellLanguage, state: JsRenderCodeCellState, spill_error: Array<Pos> | null, name: string, columns: Array<JsDataTableColumnHeader>, first_row_header: boolean, sort: Array<DataTableSort> | null, sort_dirty: boolean, alternating_colors: boolean, is_code: boolean, is_html: boolean, is_html_image: boolean, show_name: boolean, show_columns: boolean, }
export type JsRenderCodeCellState = "NotYetRun" | "RunError" | "SpillError" | "Success" | "HTML" | "Image";
export interface JsRenderFill { x: bigint, y: bigint, w: number, h: number, color: string, }
export interface JsResponse { result: boolean, error: string | null, }
export interface JsReturnInfo { line_number: number | null, output_type: string | null, }
export interface JsRowHeight { row: bigint, height: number, }
export interface JsSelectionContext { sheet_name: string, data_rects: Array<JsCellValuePosContext>, errored_code_cells: Array<JsCodeCell> | null, tables_summary: Array<JsTableSummaryContext> | null, charts_summary: Array<JsChartSummaryContext> | null, }
export interface JsSheetFill { x: number, y: number, w: number | null, h: number | null, color: string, }
export type JsSnackbarSeverity = "error" | "warning" | "success";
export interface JsSummarizeSelectionResult { count: bigint, sum: number | null, average: number | null, }
export interface JsTableInfo { name: string, sheet_name: string, chart: boolean, language: CodeCellLanguage, }
export interface JsTablesContext { sheet_name: string, data_tables: Array<JsDataTableContext>, code_tables: Array<JsCodeTableContext>, charts: Array<JsChartContext>, }
export interface JsValidationWarning { x: bigint, y: bigint, validation: string | null, style: ValidationStyle | null, }
export interface MinMax { min: number, max: number, }
export type NumberRange = { "Range": [number | null, number | null] } | { "Equal": Array<number> } | { "NotEqual": Array<number> };
export interface NumericFormat { type: NumericFormatKind, symbol: string | null, }
export type NumericFormatKind = "NUMBER" | "CURRENCY" | "PERCENTAGE" | "EXPONENTIAL";
export type PasteSpecial = "None" | "Values" | "Formats";
export interface Pos { x: bigint, y: bigint, }
export interface Rect { min: Pos, max: Pos, }
export interface RefRangeBounds { start: CellRefRangeEnd, end: CellRefRangeEnd, }
export interface Rgba { red: number, green: number, blue: number, alpha: number, }
export interface RunError { span: Span | null, msg: RunErrorMsg, }
export type RunErrorMsg = { "CodeRunError": string } | "Spill" | { "Unimplemented": string } | "UnknownError" | { "InternalError": string } | { "Unterminated": string } | { "Expected": { expected: string, got: string | null, } } | { "Unexpected": string } | { "TooManyArguments": { func_name: string, max_arg_count: number, } } | { "MissingRequiredArgument": { func_name: string, arg_name: string, } } | "BadFunctionName" | "BadCellReference" | "BadNumber" | { "BadOp": { op: string, ty1: string, ty2: string | null, use_duration_instead: boolean, } } | { "ExactArraySizeMismatch": { expected: ArraySize, got: ArraySize, } } | { "ExactArrayAxisMismatch": { axis: Axis, expected: number, got: number, } } | { "ArrayAxisMismatch": { axis: Axis, expected: number, got: number, } } | "EmptyArray" | "NonRectangularArray" | "NonLinearArray" | "ArrayTooBig" | "NotAvailable" | "Name" | "Null" | "Num" | "Value" | "CircularReference" | "Overflow" | "DivideByZero" | "NegativeExponent" | "NaN" | "IndexOutOfBounds" | "NoMatch" | "InvalidArgument" | "NotANumber" | "Infinity";
export interface SearchOptions { case_sensitive?: boolean, whole_cell?: boolean, search_code?: boolean, sheet_id?: string, }
export interface SheetBounds { sheet_id: string, bounds: GridBounds, bounds_without_formatting: GridBounds, }
export interface SheetId { id: string, }
export interface SheetInfo { sheet_id: string, name: string, order: string, color: string | null, offsets: string, bounds: GridBounds, bounds_without_formatting: GridBounds, }
export interface SheetPos { x: bigint, y: bigint, sheet_id: SheetId, }
export interface SheetRect { min: Pos, max: Pos, sheet_id: SheetId, }
export type SmallTimestamp = number;
export type SortDirection = "Ascending" | "Descending" | "None";
export interface Span { start: number, end: number, }
export interface TableRef { table_name: string, data: boolean, headers: boolean, totals: boolean, col_range: ColRange, }
export type TextCase = { "CaseInsensitive": Array<string> } | { "CaseSensitive": Array<string> };
export type TextMatch = { "Exactly": TextCase } | { "Contains": TextCase } | { "NotContains": TextCase } | { "TextLength": { min: number | null, max: number | null, } };
export type TransactionName = "Unknown" | "ResizeColumn" | "ResizeRow" | "ResizeRows" | "ResizeColumns" | "Autocomplete" | "SetBorders" | "SetCells" | "SetFormats" | "SetDataTableAt" | "CutClipboard" | "PasteClipboard" | "SetCode" | "RunCode" | "FlattenDataTable" | "SwitchDataTableKind" | "GridToDataTable" | "DataTableMeta" | "DataTableMutations" | "DataTableFirstRowAsHeader" | "DataTableAddDataTable" | "Import" | "SetSheetMetadata" | "SheetAdd" | "SheetDelete" | "DuplicateSheet" | "MoveCells" | "Validation" | "ManipulateColumnRow";
export interface TransientResize { row: bigint | null, column: bigint | null, old_size: number, new_size: number, }
export interface Validation { id: string, selection: A1Selection, rule: ValidationRule, message: ValidationMessage, error: ValidationError, }
export interface ValidationDateTime { ignore_blank: boolean, require_date: boolean, require_time: boolean, prohibit_date: boolean, prohibit_time: boolean, ranges: Array<DateTimeRange>, }
export interface ValidationError { show: boolean, style: ValidationStyle, title: string | null, message: string | null, }
export interface ValidationList { source: ValidationListSource, ignore_blank: boolean, drop_down: boolean, }
export type ValidationListSource = { "Selection": A1Selection } | { "List": Array<string> };
export interface ValidationLogical { show_checkbox: boolean, ignore_blank: boolean, }
export interface ValidationMessage { show: boolean, title: string | null, message: string | null, }
export interface ValidationNumber { ignore_blank: boolean, ranges: Array<NumberRange>, }
export type ValidationRule = "None" | { "List": ValidationList } | { "Logical": ValidationLogical } | { "Text": ValidationText } | { "Number": ValidationNumber } | { "DateTime": ValidationDateTime };
export type ValidationStyle = "Stop" | "Warning" | "Information";
export interface ValidationText { ignore_blank: boolean, text_match: Array<TextMatch>, }
