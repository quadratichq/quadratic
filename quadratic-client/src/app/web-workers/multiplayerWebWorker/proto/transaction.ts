// @generated by protobuf-ts 2.9.6 with parameter use_proto_field_name
// @generated from protobuf file "transaction.proto" (package "multiplayer", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from '@protobuf-ts/runtime';
import type { IBinaryWriter } from '@protobuf-ts/runtime';
import { WireType } from '@protobuf-ts/runtime';
import type { BinaryReadOptions } from '@protobuf-ts/runtime';
import type { IBinaryReader } from '@protobuf-ts/runtime';
import { UnknownFieldHandler } from '@protobuf-ts/runtime';
import type { PartialMessage } from '@protobuf-ts/runtime';
import { reflectionMergePartial } from '@protobuf-ts/runtime';
import { MessageType } from '@protobuf-ts/runtime';
/**
 * @generated from protobuf message multiplayer.SendTransaction
 */
export interface SendTransaction {
  /**
   * @generated from protobuf field: string type = 1;
   */
  type: string;
  /**
   * @generated from protobuf field: string id = 2;
   */
  id: string;
  /**
   * @generated from protobuf field: string session_id = 3;
   */
  session_id: string;
  /**
   * @generated from protobuf field: string file_id = 4;
   */
  file_id: string;
  /**
   * @generated from protobuf field: bytes operations = 5;
   */
  operations: Uint8Array;
}
/**
 * @generated from protobuf message multiplayer.SendGetTransactions
 */
export interface SendGetTransactions {
  /**
   * @generated from protobuf field: string type = 1;
   */
  type: string;
  /**
   * @generated from protobuf field: string session_id = 2;
   */
  session_id: string;
  /**
   * @generated from protobuf field: string file_id = 3;
   */
  file_id: string;
  /**
   * @generated from protobuf field: uint64 min_sequence_num = 4;
   */
  min_sequence_num: bigint;
}
/**
 * @generated from protobuf message multiplayer.ReceiveTransaction
 */
export interface ReceiveTransaction {
  /**
   * @generated from protobuf field: string type = 1;
   */
  type: string;
  /**
   * @generated from protobuf field: string id = 2;
   */
  id: string;
  /**
   * @generated from protobuf field: string file_id = 3;
   */
  file_id: string;
  /**
   * @generated from protobuf field: uint64 sequence_num = 4;
   */
  sequence_num: bigint;
  /**
   * @generated from protobuf field: bytes operations = 5;
   */
  operations: Uint8Array;
}
/**
 * @generated from protobuf message multiplayer.ReceiveTransactions
 */
export interface ReceiveTransactions {
  /**
   * @generated from protobuf field: string type = 1;
   */
  type: string;
  /**
   * @generated from protobuf field: repeated multiplayer.ReceiveTransaction transactions = 2;
   */
  transactions: ReceiveTransaction[];
}
// @generated message type with reflection information, may provide speed optimized methods
class SendTransaction$Type extends MessageType<SendTransaction> {
  constructor() {
    super('multiplayer.SendTransaction', [
      { no: 1, name: 'type', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 3, name: 'session_id', kind: 'scalar', localName: 'session_id', T: 9 /*ScalarType.STRING*/ },
      { no: 4, name: 'file_id', kind: 'scalar', localName: 'file_id', T: 9 /*ScalarType.STRING*/ },
      { no: 5, name: 'operations', kind: 'scalar', T: 12 /*ScalarType.BYTES*/ },
    ]);
  }
  create(value?: PartialMessage<SendTransaction>): SendTransaction {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.type = '';
    message.id = '';
    message.session_id = '';
    message.file_id = '';
    message.operations = new Uint8Array(0);
    if (value !== undefined) reflectionMergePartial<SendTransaction>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: SendTransaction
  ): SendTransaction {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string type */ 1:
          message.type = reader.string();
          break;
        case /* string id */ 2:
          message.id = reader.string();
          break;
        case /* string session_id */ 3:
          message.session_id = reader.string();
          break;
        case /* string file_id */ 4:
          message.file_id = reader.string();
          break;
        case /* bytes operations */ 5:
          message.operations = reader.bytes();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(message: SendTransaction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    /* string type = 1; */
    if (message.type !== '') writer.tag(1, WireType.LengthDelimited).string(message.type);
    /* string id = 2; */
    if (message.id !== '') writer.tag(2, WireType.LengthDelimited).string(message.id);
    /* string session_id = 3; */
    if (message.session_id !== '') writer.tag(3, WireType.LengthDelimited).string(message.session_id);
    /* string file_id = 4; */
    if (message.file_id !== '') writer.tag(4, WireType.LengthDelimited).string(message.file_id);
    /* bytes operations = 5; */
    if (message.operations.length) writer.tag(5, WireType.LengthDelimited).bytes(message.operations);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message multiplayer.SendTransaction
 */
export const SendTransaction = new SendTransaction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendGetTransactions$Type extends MessageType<SendGetTransactions> {
  constructor() {
    super('multiplayer.SendGetTransactions', [
      { no: 1, name: 'type', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'session_id', kind: 'scalar', localName: 'session_id', T: 9 /*ScalarType.STRING*/ },
      { no: 3, name: 'file_id', kind: 'scalar', localName: 'file_id', T: 9 /*ScalarType.STRING*/ },
      {
        no: 4,
        name: 'min_sequence_num',
        kind: 'scalar',
        localName: 'min_sequence_num',
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
    ]);
  }
  create(value?: PartialMessage<SendGetTransactions>): SendGetTransactions {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.type = '';
    message.session_id = '';
    message.file_id = '';
    message.min_sequence_num = 0n;
    if (value !== undefined) reflectionMergePartial<SendGetTransactions>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: SendGetTransactions
  ): SendGetTransactions {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string type */ 1:
          message.type = reader.string();
          break;
        case /* string session_id */ 2:
          message.session_id = reader.string();
          break;
        case /* string file_id */ 3:
          message.file_id = reader.string();
          break;
        case /* uint64 min_sequence_num */ 4:
          message.min_sequence_num = reader.uint64().toBigInt();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(message: SendGetTransactions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    /* string type = 1; */
    if (message.type !== '') writer.tag(1, WireType.LengthDelimited).string(message.type);
    /* string session_id = 2; */
    if (message.session_id !== '') writer.tag(2, WireType.LengthDelimited).string(message.session_id);
    /* string file_id = 3; */
    if (message.file_id !== '') writer.tag(3, WireType.LengthDelimited).string(message.file_id);
    /* uint64 min_sequence_num = 4; */
    if (message.min_sequence_num !== 0n) writer.tag(4, WireType.Varint).uint64(message.min_sequence_num);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message multiplayer.SendGetTransactions
 */
export const SendGetTransactions = new SendGetTransactions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReceiveTransaction$Type extends MessageType<ReceiveTransaction> {
  constructor() {
    super('multiplayer.ReceiveTransaction', [
      { no: 1, name: 'type', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 3, name: 'file_id', kind: 'scalar', localName: 'file_id', T: 9 /*ScalarType.STRING*/ },
      {
        no: 4,
        name: 'sequence_num',
        kind: 'scalar',
        localName: 'sequence_num',
        T: 4 /*ScalarType.UINT64*/,
        L: 0 /*LongType.BIGINT*/,
      },
      { no: 5, name: 'operations', kind: 'scalar', T: 12 /*ScalarType.BYTES*/ },
    ]);
  }
  create(value?: PartialMessage<ReceiveTransaction>): ReceiveTransaction {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.type = '';
    message.id = '';
    message.file_id = '';
    message.sequence_num = 0n;
    message.operations = new Uint8Array(0);
    if (value !== undefined) reflectionMergePartial<ReceiveTransaction>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ReceiveTransaction
  ): ReceiveTransaction {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string type */ 1:
          message.type = reader.string();
          break;
        case /* string id */ 2:
          message.id = reader.string();
          break;
        case /* string file_id */ 3:
          message.file_id = reader.string();
          break;
        case /* uint64 sequence_num */ 4:
          message.sequence_num = reader.uint64().toBigInt();
          break;
        case /* bytes operations */ 5:
          message.operations = reader.bytes();
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(message: ReceiveTransaction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    /* string type = 1; */
    if (message.type !== '') writer.tag(1, WireType.LengthDelimited).string(message.type);
    /* string id = 2; */
    if (message.id !== '') writer.tag(2, WireType.LengthDelimited).string(message.id);
    /* string file_id = 3; */
    if (message.file_id !== '') writer.tag(3, WireType.LengthDelimited).string(message.file_id);
    /* uint64 sequence_num = 4; */
    if (message.sequence_num !== 0n) writer.tag(4, WireType.Varint).uint64(message.sequence_num);
    /* bytes operations = 5; */
    if (message.operations.length) writer.tag(5, WireType.LengthDelimited).bytes(message.operations);
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message multiplayer.ReceiveTransaction
 */
export const ReceiveTransaction = new ReceiveTransaction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReceiveTransactions$Type extends MessageType<ReceiveTransactions> {
  constructor() {
    super('multiplayer.ReceiveTransactions', [
      { no: 1, name: 'type', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: 'transactions', kind: 'message', repeat: 1 /*RepeatType.PACKED*/, T: () => ReceiveTransaction },
    ]);
  }
  create(value?: PartialMessage<ReceiveTransactions>): ReceiveTransactions {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.type = '';
    message.transactions = [];
    if (value !== undefined) reflectionMergePartial<ReceiveTransactions>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ReceiveTransactions
  ): ReceiveTransactions {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string type */ 1:
          message.type = reader.string();
          break;
        case /* repeated multiplayer.ReceiveTransaction transactions */ 2:
          message.transactions.push(ReceiveTransaction.internalBinaryRead(reader, reader.uint32(), options));
          break;
        default:
          let u = options.readUnknownField;
          if (u === 'throw')
            throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
          let d = reader.skip(wireType);
          if (u !== false) (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
      }
    }
    return message;
  }
  internalBinaryWrite(message: ReceiveTransactions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
    /* string type = 1; */
    if (message.type !== '') writer.tag(1, WireType.LengthDelimited).string(message.type);
    /* repeated multiplayer.ReceiveTransaction transactions = 2; */
    for (let i = 0; i < message.transactions.length; i++)
      ReceiveTransaction.internalBinaryWrite(
        message.transactions[i],
        writer.tag(2, WireType.LengthDelimited).fork(),
        options
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false) (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message multiplayer.ReceiveTransactions
 */
export const ReceiveTransactions = new ReceiveTransactions$Type();
