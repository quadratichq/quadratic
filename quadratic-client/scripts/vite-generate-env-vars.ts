import fs from 'fs';
import { loadEnv } from 'vite';
import { z } from 'zod';

const EnvSchema = z.object({
  // Set by vite
  MODE: z.enum(['development', 'production', 'test']),

  // Required
  VITE_QUADRATIC_MULTIPLAYER_URL: z.string(),
  VITE_AUTH0_AUDIENCE: z.string(),
  VITE_AUTH0_ISSUER: z.string(),
  VITE_STORAGE_TYPE: z.enum(['file-system', 's3']), // TODO: are these right?
  VITE_QUADRATIC_API_URL: z.string(),
  VITE_QUADRATIC_CONNECTION_URL: z.string(),
  VITE_VERSION: z.string(),

  // Optional (w/defaults for some)
  VITE_AI_ANALYST_START_NEW_CHAT_MSG_THRESHOLD: z.coerce.number().int().positive().default(20),
  VITE_SENTRY_DSN: z.string().optional(), // Can be set to 'none' to disable when a value is required
  VITE_GOOGLE_ANALYTICS_GTAG: z.string().optional(),
  VITE_AMPLITUDE_ANALYTICS_API_KEY: z.string().optional(),
  VITE_MIXPANEL_ANALYTICS_KEY: z.string().optional(),
  VITE_AUTH_TYPE: z.string().default(''),
  VITE_DEBUG: z.coerce.boolean().default(false),
  VITE_AUTH0_DOMAIN: z.string().default(''),
  VITE_AUTH0_CLIENT_ID: z.string().default(''),
  VITE_ORY_HOST: z.string().optional(),
});

export default function envValidationAndGeneratePlugin() {
  return {
    name: 'validate-and-generate-env-vars',
    config(config, { mode }) {
      const env = loadEnv(mode, process.cwd(), '');
      const result = EnvSchema.safeParse({
        ...env,
        MODE: mode,
      });
      if (!result.success) {
        console.error('❌ Invalid environment variables:', result.error.flatten().fieldErrors);
        process.exit(1);
      }

      // Strip VITE_ prefix from keys
      const envVars = Object.fromEntries(
        Object.entries(result.data).map(([key, value]) => [key.replace('VITE_', ''), value])
      );

      // Generate a TypeScript file with the validated values
      const outPath = './src/env.ts';
      const lines = [
        '// prettier-ignore',
        '// eslint-disable',
        '// This file is auto-generated by `scripts/vite-generate-env-vars.ts`',
        '// Do not edit this file directly.',
        'const env = ' + JSON.stringify(envVars, null, 2) + ';',
        'export default env;',
        '',
      ];
      fs.writeFileSync(outPath, lines.join('\n'), 'utf-8');
    },
  };
}
